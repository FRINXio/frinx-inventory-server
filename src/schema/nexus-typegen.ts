/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as SourceTypes from './source-types';
import type { Context } from './../context';
import type { core } from 'nexus';
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void; // "Upload";
    /**
     * Graphql custom scalar record type
     */
    record<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void; // "Record";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void; // "Upload";
    /**
     * Graphql custom scalar record type
     */
    record<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void; // "Record";
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ActionCompleteTaskInput: {
    // input type
    output?: string | null; // String
    taskId?: string | null; // String
    taskRefName?: string | null; // String
    workflowId?: string | null; // String
  };
  ActionFailTaskInput: {
    // input type
    output?: string | null; // String
    taskId?: string | null; // String
    taskRefName?: string | null; // String
    workflowId?: string | null; // String
  };
  ActionStartWorkflowInput: {
    // input type
    correlationId?: string | null; // String
    input?: string | null; // String
    name?: string | null; // String
    taskToDomain?: string | null; // String
    version?: number | null; // Int
  };
  AddBlueprintInput: {
    // input type
    name: string; // String!
    template: string; // String!
  };
  AddDeviceInput: {
    // input type
    address?: string | null; // String
    blueprintId?: string | null; // String
    deviceSize?: NexusGenEnums['DeviceSize'] | null; // DeviceSize
    deviceType?: string | null; // String
    labelIds?: string[] | null; // [String!]
    model?: string | null; // String
    mountParameters?: string | null; // String
    name: string; // String!
    password?: string | null; // String
    port?: number | null; // Int
    serviceState?: NexusGenEnums['DeviceServiceState'] | null; // DeviceServiceState
    username?: string | null; // String
    vendor?: string | null; // String
    version?: string | null; // String
    zoneId: string; // String!
  };
  AddLocationInput: {
    // input type
    countryId: string; // String!
    name: string; // String!
  };
  AddSnapshotInput: {
    // input type
    deviceId: string; // String!
    name: string; // String!
  };
  AddZoneInput: {
    // input type
    name: string; // String!
  };
  ApplySnapshotInput: {
    // input type
    deviceId: string; // String!
    name: string; // String!
  };
  BulkOperationInput: {
    // input type
    executedWorkflowIds: string[]; // [String!]!
  };
  CSVImportInput: {
    // input type
    file: NexusGenScalars['Upload']; // Upload!
    zoneId: string; // String!
  };
  CommitConfigInput: {
    // input type
    deviceId: string; // String!
    shouldDryRun?: boolean | null; // Boolean
  };
  CreateEventHandlerInput: {
    // input type
    actions: NexusGenInputs['EventHandlerActionInput'][]; // [EventHandlerActionInput!]!
    condition?: string | null; // String
    evaluatorType?: string | null; // String
    event: string; // String!
    isActive?: boolean | null; // Boolean
    name: string; // String!
  };
  CreateLabelInput: {
    // input type
    name: string; // String!
  };
  CreateScheduleInput: {
    // input type
    cronString: string; // String!
    isEnabled?: boolean | null; // Boolean
    name: string; // String!
    parallelRuns?: boolean | null; // Boolean
    performFromDate?: string | null; // String
    performTillDate?: string | null; // String
    workflowContext?: string | null; // String
    workflowName: string; // String!
    workflowVersion: string; // String!
  };
  CreateTaskDefinitionInput: {
    // input type
    accessPolicy?: string | null; // String
    backoffScaleFactor?: number | null; // Int
    concurrentExecLimit?: number | null; // Int
    createdBy?: string | null; // String
    description?: string | null; // String
    executionNameSpace?: string | null; // String
    inputKeys?: string[] | null; // [String!]
    inputTemplate?: string | null; // String
    isolationGroupId?: string | null; // String
    name: string; // String!
    outputKeys?: string[] | null; // [String!]
    ownerApp?: string | null; // String
    ownerEmail?: string | null; // String
    pollTimeoutSeconds?: number | null; // Int
    rateLimitFrequencyInSeconds?: number | null; // Int
    rateLimitPerFrequency?: number | null; // Int
    responseTimeoutSeconds?: number | null; // Int
    retryCount?: number | null; // Int
    retryDelaySeconds?: number | null; // Int
    retryLogic?: NexusGenEnums['RetryLogic'] | null; // RetryLogic
    timeoutPolicy?: NexusGenEnums['TaskTimeoutPolicy'] | null; // TaskTimeoutPolicy
    timeoutSeconds: number; // Int!
    updatedBy?: string | null; // String
  };
  CreateWorkflowInput: {
    // input type
    workflow: NexusGenInputs['WorkflowInput']; // WorkflowInput!
  };
  DeleteSnapshotInput: {
    // input type
    deviceId: string; // String!
    name: string; // String!
    transactionId: string; // String!
  };
  DeleteWorkflowInput: {
    // input type
    name: string; // String!
    version: number; // Int!
  };
  DeviceOrderByInput: {
    // input type
    direction: NexusGenEnums['SortDirection']; // SortDirection!
    sortKey: NexusGenEnums['SortDeviceBy']; // SortDeviceBy!
  };
  EditWorkflowScheduleInput: {
    // input type
    cronString?: string | null; // String
    isEnabled?: boolean | null; // Boolean
    parallelRuns?: boolean | null; // Boolean
    performFromDate?: string | null; // String
    performTillDate?: string | null; // String
    workflowContext?: string | null; // String
    workflowName?: string | null; // String
    workflowVersion?: string | null; // String
  };
  EventHandlerActionInput: {
    // input type
    action?: NexusGenEnums['EventHandlerActionEnum'] | null; // EventHandlerActionEnum
    completeTask?: NexusGenInputs['ActionCompleteTaskInput'] | null; // ActionCompleteTaskInput
    expandInlineJSON?: boolean | null; // Boolean
    failTask?: NexusGenInputs['ActionFailTaskInput'] | null; // ActionFailTaskInput
    startWorkflow?: NexusGenInputs['ActionStartWorkflowInput'] | null; // ActionStartWorkflowInput
  };
  EventHandlersOrderByInput: {
    // input type
    direction: NexusGenEnums['SortDirection']; // SortDirection!
    sortKey: NexusGenEnums['SortEventHandlersBy']; // SortEventHandlersBy!
  };
  ExecuteNewWorkflowInput: {
    // input type
    correlationId?: string | null; // String
    externalInputPayloadStoragePath?: string | null; // String
    input?: string | null; // String
    name: string; // String!
    priority?: number | null; // Int
    taskToDomain?: string | null; // String
    version?: number | null; // Int
  };
  ExecuteWorkflowByName: {
    // input type
    correlationId?: string | null; // String
    inputParameters: string; // String!
    priority?: number | null; // Int
    workflowName: string; // String!
    workflowVersion?: number | null; // Int
  };
  ExecutedWorkflowFilterInput: {
    // input type
    startTime?: NexusGenInputs['ExecutedWorkflowStartTimeRange'] | null; // ExecutedWorkflowStartTimeRange
    status?: NexusGenEnums['ExecutedWorkflowStatus'][] | null; // [ExecutedWorkflowStatus!]
    workflowId?: string[] | null; // [String!]
    workflowType?: string[] | null; // [String!]
  };
  ExecutedWorkflowSearchInput: {
    // input type
    isRootWorkflow?: boolean | null; // Boolean
    query?: NexusGenInputs['ExecutedWorkflowFilterInput'] | null; // ExecutedWorkflowFilterInput
  };
  ExecutedWorkflowStartTimeRange: {
    // input type
    from: string; // String!
    to?: string | null; // String
  };
  ExecutedWorkflowsOrderByInput: {
    // input type
    direction: NexusGenEnums['SortExecutedWorkflowsDirection']; // SortExecutedWorkflowsDirection!
    sortKey: NexusGenEnums['SortExecutedWorkflowsBy']; // SortExecutedWorkflowsBy!
  };
  FilterDevicesInput: {
    // input type
    deviceName?: string | null; // String
    labels?: string[] | null; // [String!]
  };
  FilterEventHandlerInput: {
    // input type
    evaluatorType?: string | null; // String
    event?: string | null; // String
    isActive?: boolean | null; // Boolean
    name?: string | null; // String
  };
  FilterPollDataInput: {
    // input type
    afterDate?: string | null; // String
    beforeDate?: string | null; // String
    domain?: string | null; // String
    queueName?: string | null; // String
    workerId?: string | null; // String
  };
  FilterPoolsInput: {
    // input type
    poolName?: string | null; // String
  };
  FilterTaskDefinitionsInput: {
    // input type
    keyword?: string | null; // String
  };
  FilterTopologyInput: {
    // input type
    labels?: string[] | null; // [String!]
  };
  FilterWorkflowsInput: {
    // input type
    keyword?: string | null; // String
    labels?: string[] | null; // [String!]
  };
  FreeResourceInput: {
    // input type
    poolId: string; // String!
    resource: NexusGenScalars['Record']; // Record!
  };
  GraphNodeCoordinatesInput: {
    // input type
    deviceName: string; // String!
    x: number; // Float!
    y: number; // Float!
  };
  OutputParameterInput: {
    // input type
    key: string; // String!
    value: string; // String!
  };
  PaginationArgs: {
    // input type
    size: number; // Int!
    start: number; // Int!
  };
  PollsOrderByInput: {
    // input type
    direction: NexusGenEnums['SortPollsDirection']; // SortPollsDirection!
    sortKey: NexusGenEnums['SortPollsBy']; // SortPollsBy!
  };
  RemoveWorkflowInput: {
    // input type
    shouldArchiveWorkflow?: boolean | null; // Boolean
  };
  ResourceTypeInput: {
    // input type
    resourceTypeId?: string | null; // String
  };
  RestartWorkflowInput: {
    // input type
    shouldUseLatestDefinitions?: boolean | null; // Boolean
  };
  RetryWorkflowInput: {
    // input type
    shouldResumeSubworkflowTasks?: boolean | null; // Boolean
  };
  ScheduleFilterInput: {
    // input type
    workflowName: string; // String!
    workflowVersion: string; // String!
  };
  StartWorkflowRequestInput: {
    // input type
    workflow: NexusGenInputs['ExecuteNewWorkflowInput']; // ExecuteNewWorkflowInput!
    workflowDefinition?: NexusGenInputs['WorkflowDefinitionInput'] | null; // WorkflowDefinitionInput
  };
  TaskInput: {
    // input type
    asyncComplete?: boolean | null; // Boolean
    decisionCases?: string | null; // String
    defaultCase?: string | null; // String
    description?: string | null; // String
    inputParameters?: string | null; // String
    joinOn?: Array<string | null> | null; // [String]
    loopCondition?: string | null; // String
    name: string; // String!
    optional?: boolean | null; // Boolean
    retryCount?: number | null; // Int
    startDelay?: number | null; // Int
    taskReferenceName: string; // String!
    type?: string | null; // String
    workflowTaskType?: Array<NexusGenEnums['WorkflowTaskType'] | null> | null; // [WorkflowTaskType]
  };
  TasksOrderByInput: {
    // input type
    direction: NexusGenEnums['SortDirection']; // SortDirection!
    sortKey: NexusGenEnums['SortTasksBy']; // SortTasksBy!
  };
  TerminateWorkflowInput: {
    // input type
    reason?: string | null; // String
  };
  UpdateBlueprintInput: {
    // input type
    name?: string | null; // String
    template?: string | null; // String
  };
  UpdateDataStoreInput: {
    // input type
    config: string; // String!
  };
  UpdateDeviceInput: {
    // input type
    address?: string | null; // String
    blueprintId?: string | null; // String
    deviceSize?: NexusGenEnums['DeviceSize'] | null; // DeviceSize
    deviceType?: string | null; // String
    labelIds?: string[] | null; // [String!]
    locationId?: string | null; // String
    model?: string | null; // String
    mountParameters?: string | null; // String
    password?: string | null; // String
    port?: number | null; // Int
    serviceState?: NexusGenEnums['DeviceServiceState'] | null; // DeviceServiceState
    username?: string | null; // String
    vendor?: string | null; // String
    version?: string | null; // String
  };
  UpdateEventHandlerInput: {
    // input type
    actions?: NexusGenInputs['EventHandlerActionInput'][] | null; // [EventHandlerActionInput!]
    condition?: string | null; // String
    evaluatorType?: string | null; // String
    isActive?: boolean | null; // Boolean
  };
  UpdateWorkflowInput: {
    // input type
    workflow: NexusGenInputs['WorkflowInput']; // WorkflowInput!
  };
  WorkflowDefinitionInput: {
    // input type
    createTime?: number | null; // Int
    createdAt?: number | null; // Int
    createdBy?: string | null; // String
    description?: string | null; // String
    inputParameters?: Array<string | null> | null; // [String]
    inputTemplate?: string | null; // String
    name: string; // String!
    outputParameters?: string | null; // String
    ownerApp?: string | null; // String
    ownerEmail?: string | null; // String
    restartable?: boolean | null; // Boolean
    schemaVersion?: number | null; // Int
    tasks: NexusGenInputs['TaskInput'][]; // [TaskInput!]!
    timeoutPolicy?: NexusGenEnums['TimeoutPolicy'] | null; // TimeoutPolicy
    timeoutSeconds: number; // Int!
    updateTime?: number | null; // Int
    updatedAt?: number | null; // Int
    updatedBy?: string | null; // String
    variables?: string | null; // String
    version?: number | null; // Int
  };
  WorkflowInput: {
    // input type
    createdAt?: string | null; // String
    description?: string | null; // String
    name: string; // String!
    outputParameters?: NexusGenInputs['OutputParameterInput'][] | null; // [OutputParameterInput!]
    restartable?: boolean | null; // Boolean
    tasks: string; // String!
    timeoutSeconds: number; // Int!
    updatedAt?: string | null; // String
    version?: number | null; // Int
  };
  WorkflowsOrderByInput: {
    // input type
    direction: NexusGenEnums['SortDirection']; // SortDirection!
    sortKey: NexusGenEnums['SortWorkflowsBy']; // SortWorkflowsBy!
  };
}

export interface NexusGenEnums {
  DeviceServiceState: 'IN_SERVICE' | 'OUT_OF_SERVICE' | 'PLANNING';
  DeviceSize: 'LARGE' | 'MEDIUM' | 'SMALL';
  DeviceSource: 'DISCOVERED' | 'IMPORTED' | 'MANUAL';
  EventHandlerActionEnum: 'complete_task' | 'fail_task' | 'start_workflow';
  ExecutedWorkflowStatus: 'COMPLETED' | 'FAILED' | 'PAUSED' | 'RUNNING' | 'TERMINATED' | 'TIMED_OUT';
  ExecutedWorkflowTaskStatus:
    | 'CANCELED'
    | 'COMPLETED'
    | 'COMPLETED_WITH_ERROR'
    | 'FAILED'
    | 'FAILED_WITH_TERMINAL_ERROR'
    | 'IN_PROGRESS'
    | 'SCHEDULED'
    | 'SKIPPED'
    | 'TIMED_OUT';
  GraphEdgeStatus: 'ok' | 'unknown';
  PoolType: 'allocating' | 'set' | 'singleton';
  RetryLogic: 'EXPONENTIAL_BACKOFF' | 'FIXED' | 'LINEAR_BACKOFF';
  ScheduleStatus: 'COMPLETED' | 'FAILED' | 'PAUSED' | 'RUNNING' | 'TERMINATED' | 'TIMED_OUT' | 'UNKNOWN';
  SortDeviceBy: 'createdAt' | 'name' | 'serviceState';
  SortDirection: 'ASC' | 'DESC';
  SortEventHandlersBy: 'evaluatorType' | 'event' | 'isActive' | 'name';
  SortExecutedWorkflowsBy: 'endTime' | 'startTime' | 'status' | 'workflowId' | 'workflowName';
  SortExecutedWorkflowsDirection: 'asc' | 'desc';
  SortPollsBy: 'lastPollTime' | 'queueName' | 'workerId';
  SortPollsDirection: 'asc' | 'desc';
  SortTasksBy: 'name' | 'responseTimeoutSeconds' | 'retryCount' | 'retryLogic' | 'timeoutPolicy' | 'timeoutSeconds';
  SortWorkflowsBy: 'name';
  TaskTimeoutPolicy: 'ALERT_ONLY' | 'RETRY' | 'TIME_OUT_WF';
  TimeoutPolicy: 'ALERT_ONLY' | 'TIME_OUT_WF';
  WorkflowTaskType:
    | 'DECISION'
    | 'DO_WHILE'
    | 'DYNAMIC'
    | 'EVENT'
    | 'EXCLUSIVE_JOIN'
    | 'FORK_JOIN'
    | 'FORK_JOIN_DYNAMIC'
    | 'HTTP'
    | 'HUMAN'
    | 'INLINE'
    | 'JOIN'
    | 'JSON_JQ_TRANSFORM'
    | 'KAFKA_PUBLISH'
    | 'LAMBDA'
    | 'SET_VARIABLE'
    | 'SIMPLE'
    | 'START_WORKFLOW'
    | 'SUB_WORKFLOW'
    | 'SWITCH'
    | 'TERMINATE'
    | 'USER_DEFINED'
    | 'WAIT';
}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Record: any;
  Upload: any;
}

export interface NexusGenObjects {
  ActionCompleteTask: {
    // root type
    output?: string | null; // String
    taskId?: string | null; // String
    taskRefName?: string | null; // String
    workflowId?: string | null; // String
  };
  ActionFailTask: {
    // root type
    output?: string | null; // String
    taskId?: string | null; // String
    taskRefName?: string | null; // String
    workflowId?: string | null; // String
  };
  ActionStartWorkflow: {
    // root type
    correlationId?: string | null; // String
    input?: string | null; // String
    name?: string | null; // String
    taskToDomain?: string | null; // String
    version?: number | null; // Int
  };
  AddBlueprintPayload: {
    // root type
    blueprint: NexusGenRootTypes['Blueprint']; // Blueprint!
  };
  AddDevicePayload: {
    // root type
    device: NexusGenRootTypes['Device']; // Device!
  };
  AddLocationPayload: {
    // root type
    location: NexusGenRootTypes['Location']; // Location!
  };
  AddSnapshotPayload: {
    // root type
    snapshot?: NexusGenRootTypes['Snapshot'] | null; // Snapshot
  };
  AddZonePayload: {
    // root type
    zone: NexusGenRootTypes['Zone']; // Zone!
  };
  ApplySnapshotPayload: {
    // root type
    isOk: boolean; // Boolean!
    output: string; // String!
  };
  Blueprint: SourceTypes.Blueprint;
  BlueprintConnection: {
    // root type
    edges: NexusGenRootTypes['BlueprintEdge'][]; // [BlueprintEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  BlueprintEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Blueprint']; // Blueprint!
  };
  BulkOperationResponse: {
    // root type
    bulkErrorResults?: string | null; // String
    bulkSuccessfulResults?: string[] | null; // [String!]
  };
  CSVImport: {
    // root type
    isOk?: boolean | null; // Boolean
  };
  CalculatedDiffPayload: {
    // root type
    result: NexusGenRootTypes['CalculatedDiffResult']; // CalculatedDiffResult!
  };
  CalculatedDiffResult: {
    // root type
    createdData: NexusGenRootTypes['DiffData'][]; // [DiffData!]!
    deletedData: NexusGenRootTypes['DiffData'][]; // [DiffData!]!
    updatedData: NexusGenRootTypes['CalculatedUpdateDiffData'][]; // [CalculatedUpdateDiffData!]!
  };
  CalculatedUpdateDiffData: {
    // root type
    actualData: string; // String!
    intendedData: string; // String!
    path: string; // String!
  };
  CloseTransactionPayload: {
    // root type
    isOk: boolean; // Boolean!
  };
  CommitConfigOutput: {
    // root type
    configuration?: string | null; // String
    deviceId: string; // String!
    message?: string | null; // String
  };
  CommitConfigPayload: {
    // root type
    output: NexusGenRootTypes['CommitConfigOutput']; // CommitConfigOutput!
  };
  Country: SourceTypes.Country;
  CountryConnection: {
    // root type
    edges: NexusGenRootTypes['CountryEdge'][]; // [CountryEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  CountryEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Country']; // Country!
  };
  CreateLabelPayload: {
    // root type
    label?: NexusGenRootTypes['Label'] | null; // Label
  };
  CreateTransactionPayload: {
    // root type
    transactionId?: string | null; // String
  };
  CreateWorkflowPayload: {
    // root type
    workflow: NexusGenRootTypes['Workflow']; // Workflow!
  };
  DataStore: SourceTypes.DataStore;
  DeleteBlueprintPayload: {
    // root type
    blueprint?: NexusGenRootTypes['Blueprint'] | null; // Blueprint
  };
  DeleteDevicePayload: {
    // root type
    device?: NexusGenRootTypes['Device'] | null; // Device
  };
  DeleteLabelPayload: {
    // root type
    label?: NexusGenRootTypes['Label'] | null; // Label
  };
  DeleteSnapshotPayload: {
    // root type
    snapshot?: NexusGenRootTypes['Snapshot'] | null; // Snapshot
  };
  DeleteWorkflowPayload: {
    // root type
    workflow: NexusGenRootTypes['Workflow']; // Workflow!
  };
  Device: SourceTypes.Device;
  DeviceConnection: {
    // root type
    edges: NexusGenRootTypes['DeviceEdge'][]; // [DeviceEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  DeviceEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Device']; // Device!
  };
  DiffData: {
    // root type
    data: string; // String!
    path: string; // String!
  };
  EdgeSourceTarget: {
    // root type
    interface: string; // String!
    nodeId: string; // String!
  };
  EventHandler: {
    // root type
    actions: NexusGenRootTypes['EventHandlerAction'][]; // [EventHandlerAction!]!
    condition?: string | null; // String
    evaluatorType?: string | null; // String
    event: string; // String!
    id: string; // ID!
    isActive?: boolean | null; // Boolean
    name: string; // String!
  };
  EventHandlerAction: {
    // root type
    action?: NexusGenEnums['EventHandlerActionEnum'] | null; // EventHandlerActionEnum
    completeTask?: NexusGenRootTypes['ActionCompleteTask'] | null; // ActionCompleteTask
    expandInlineJSON?: boolean | null; // Boolean
    failTask?: NexusGenRootTypes['ActionFailTask'] | null; // ActionFailTask
    startWorkflow?: NexusGenRootTypes['ActionStartWorkflow'] | null; // ActionStartWorkflow
  };
  EventHandlerConnection: {
    // root type
    edges?: NexusGenRootTypes['EventHandlerEdge'][] | null; // [EventHandlerEdge!]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  };
  EventHandlerEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes['EventHandler']; // EventHandler!
  };
  ExecutedWorkflow: SourceTypes.ExecutedWorkflow;
  ExecutedWorkflowConnection: {
    // root type
    edges: NexusGenRootTypes['ExecutedWorkflowEdge'][]; // [ExecutedWorkflowEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  ExecutedWorkflowEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes['ExecutedWorkflow']; // ExecutedWorkflow!
  };
  ExecutedWorkflowTask: SourceTypes.ExecutedWorkflowTask;
  GraphEdge: {
    // root type
    id: string; // ID!
    source: NexusGenRootTypes['EdgeSourceTarget']; // EdgeSourceTarget!
    target: NexusGenRootTypes['EdgeSourceTarget']; // EdgeSourceTarget!
    weight?: number | null; // Int
  };
  GraphNode: {
    // root type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    device: NexusGenRootTypes['Device']; // Device!
    deviceType?: string | null; // String
    id: string; // ID!
    interfaces: NexusGenRootTypes['GraphNodeInterface'][]; // [GraphNodeInterface!]!
    softwareVersion?: string | null; // String
  };
  GraphNodeCoordinates: {
    // root type
    x: number; // Float!
    y: number; // Float!
  };
  GraphNodeInterface: {
    // root type
    id: string; // String!
    name: string; // String!
    status: NexusGenEnums['GraphEdgeStatus']; // GraphEdgeStatus!
  };
  GraphVersionEdge: {
    // root type
    id: string; // ID!
    source: NexusGenRootTypes['EdgeSourceTarget']; // EdgeSourceTarget!
    target: NexusGenRootTypes['EdgeSourceTarget']; // EdgeSourceTarget!
  };
  GraphVersionNode: {
    // root type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    deviceType?: string | null; // String
    id: string; // ID!
    interfaces: NexusGenRootTypes['GraphNodeInterface'][]; // [GraphNodeInterface!]!
    name: string; // String!
    softwareVersion?: string | null; // String
  };
  InstallDevicePayload: {
    // root type
    device: NexusGenRootTypes['Device']; // Device!
  };
  IsOkResponse: {
    // root type
    isOk: boolean; // Boolean!
  };
  Label: SourceTypes.Label;
  LabelConnection: {
    // root type
    edges: NexusGenRootTypes['LabelEdge'][]; // [LabelEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  LabelEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Label']; // Label!
  };
  Location: SourceTypes.Location;
  LocationConnection: {
    // root type
    edges: NexusGenRootTypes['LocationEdge'][]; // [LocationEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  LocationEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Location']; // Location!
  };
  Mutation: {};
  NetInterface: {
    // root type
    id: string; // String!
    name: string; // String!
  };
  NetNetwork: {
    // root type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    id: string; // String!
    subnet: string; // String!
  };
  NetNode: {
    // root type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    id: string; // ID!
    interfaces: NexusGenRootTypes['NetInterface'][]; // [NetInterface!]!
    name: string; // String!
    networks: NexusGenRootTypes['NetNetwork'][]; // [NetNetwork!]!
    nodeId: string; // String!
  };
  NetRoutingPathNode: {
    // root type
    nodes: NexusGenRootTypes['NetRoutingPathNodeInfo'][]; // [NetRoutingPathNodeInfo!]!
    weight?: number | null; // Int
  };
  NetRoutingPathNodeInfo: {
    // root type
    name?: string | null; // String
    weight?: number | null; // Int
  };
  NetTopology: {
    // root type
    edges: NexusGenRootTypes['GraphEdge'][]; // [GraphEdge!]!
    nodes: NexusGenRootTypes['NetNode'][]; // [NetNode!]!
  };
  OutputParameter: {
    // root type
    key: string; // String!
    value: string; // String!
  };
  PageInfo: {
    // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  };
  PollData: {
    // root type
    domain?: string | null; // String
    id: string; // ID!
    lastPollTime?: string | null; // String
    queueName?: string | null; // String
    workerId?: string | null; // String
  };
  PollDataConnection: {
    // root type
    edges?: Array<NexusGenRootTypes['PollDataEdge'] | null> | null; // [PollDataEdge]
    pageInfo?: NexusGenRootTypes['PageInfo'] | null; // PageInfo
    totalCount?: number | null; // Int
  };
  PollDataEdge: {
    // root type
    cursor?: string | null; // String
    node?: NexusGenRootTypes['PollData'] | null; // PollData
  };
  Pool: {
    // root type
    id: string; // ID!
    name: string; // String!
    poolType: NexusGenEnums['PoolType']; // PoolType!
    resourceType: NexusGenRootTypes['ResourceType']; // ResourceType!
    tags: NexusGenRootTypes['Tag'][]; // [Tag!]!
  };
  PoolConnection: {
    // root type
    edges: NexusGenRootTypes['PoolEdge'][]; // [PoolEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  PoolEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Pool']; // Pool!
  };
  Query: {};
  ResetConfigPayload: {
    // root type
    dataStore: NexusGenRootTypes['DataStore']; // DataStore!
  };
  ResourceType: {
    // root type
    id: string; // ID!
    name: string; // String!
  };
  RevertChangesPayload: {
    // root type
    isOk: boolean; // Boolean!
  };
  Schedule: SourceTypes.Schedule;
  ScheduleConnection: {
    // root type
    edges: Array<NexusGenRootTypes['ScheduleEdge'] | null>; // [ScheduleEdge]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  ScheduleEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Schedule']; // Schedule!
  };
  Snapshot: {
    // root type
    createdAt: string; // String!
    name: string; // String!
  };
  SubWorkflow: {
    // root type
    executedWorkflowDetail: NexusGenRootTypes['ExecutedWorkflow']; // ExecutedWorkflow!
    referenceTaskName: string; // String!
    workflowDetail: NexusGenRootTypes['Workflow']; // Workflow!
  };
  Subscription: {};
  SyncFromNetworkPayload: {
    // root type
    dataStore?: NexusGenRootTypes['DataStore'] | null; // DataStore
  };
  Tag: {
    // root type
    id: string; // ID!
    tag: string; // String!
  };
  TaskDefinition: SourceTypes.TaskDefinition;
  TaskDefinitionConnection: {
    // root type
    edges: NexusGenRootTypes['TaskDefinitionEdge'][]; // [TaskDefinitionEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  TaskDefinitionEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes['TaskDefinition']; // TaskDefinition!
  };
  Topology: {
    // root type
    edges: NexusGenRootTypes['GraphEdge'][]; // [GraphEdge!]!
    nodes: NexusGenRootTypes['GraphNode'][]; // [GraphNode!]!
  };
  TopologyCommonNodes: {
    // root type
    commonNodes: string[]; // [String!]!
  };
  TopologyVersionData: {
    // root type
    edges: NexusGenRootTypes['GraphVersionEdge'][]; // [GraphVersionEdge!]!
    nodes: NexusGenRootTypes['GraphVersionNode'][]; // [GraphVersionNode!]!
  };
  Transaction: {
    // root type
    changes: NexusGenRootTypes['TransactionChange'][]; // [TransactionChange!]!
    lastCommitTime: string; // String!
    transactionId: string; // String!
  };
  TransactionChange: {
    // root type
    device: NexusGenRootTypes['Device']; // Device!
    diff: NexusGenRootTypes['TransactionDiff'][]; // [TransactionDiff!]!
  };
  TransactionDiff: {
    // root type
    dataAfter?: string | null; // String
    dataBefore?: string | null; // String
    path: string; // String!
  };
  UninstallDevicePayload: {
    // root type
    device: NexusGenRootTypes['Device']; // Device!
  };
  UpdateBlueprintPayload: {
    // root type
    blueprint: NexusGenRootTypes['Blueprint']; // Blueprint!
  };
  UpdateDataStorePayload: {
    // root type
    dataStore: NexusGenRootTypes['DataStore']; // DataStore!
  };
  UpdateDeviceMetadataPayload: {
    // root type
    devices?: Array<NexusGenRootTypes['Device'] | null> | null; // [Device]
  };
  UpdateDevicePayload: {
    // root type
    device?: NexusGenRootTypes['Device'] | null; // Device
  };
  UpdateGraphNodeCoordinatesPayload: {
    // root type
    deviceNames: string[]; // [String!]!
  };
  UpdateWorkflowPayload: {
    // root type
    workflow: NexusGenRootTypes['Workflow']; // Workflow!
  };
  Workflow: SourceTypes.Workflow;
  WorkflowConnection: {
    // root type
    edges: NexusGenRootTypes['WorkflowEdge'][]; // [WorkflowEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  WorkflowEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Workflow']; // Workflow!
  };
  WorkflowInstanceDetail: {
    // root type
    meta?: NexusGenRootTypes['Workflow'] | null; // Workflow
    result: NexusGenRootTypes['ExecutedWorkflow']; // ExecutedWorkflow!
    subworkflows?: NexusGenRootTypes['SubWorkflow'][] | null; // [SubWorkflow!]
  };
  Zone: SourceTypes.Zone;
  ZoneEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Zone']; // Zone!
  };
  ZonesConnection: {
    // root type
    edges: NexusGenRootTypes['ZoneEdge'][]; // [ZoneEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
}

export interface NexusGenInterfaces {
  BaseGraphNode: core.Discriminate<'GraphNode', 'required'> | core.Discriminate<'GraphVersionNode', 'required'>;
  Node:
    | core.Discriminate<'Blueprint', 'required'>
    | core.Discriminate<'Country', 'required'>
    | core.Discriminate<'Device', 'required'>
    | core.Discriminate<'EventHandler', 'required'>
    | core.Discriminate<'ExecutedWorkflow', 'required'>
    | core.Discriminate<'ExecutedWorkflowTask', 'required'>
    | core.Discriminate<'Label', 'required'>
    | core.Discriminate<'Location', 'required'>
    | core.Discriminate<'Pool', 'required'>
    | core.Discriminate<'Schedule', 'required'>
    | core.Discriminate<'TaskDefinition', 'required'>
    | core.Discriminate<'Workflow', 'required'>
    | core.Discriminate<'Zone', 'required'>;
}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums;

export interface NexusGenFieldTypes {
  ActionCompleteTask: {
    // field return type
    output: string | null; // String
    taskId: string | null; // String
    taskRefName: string | null; // String
    workflowId: string | null; // String
  };
  ActionFailTask: {
    // field return type
    output: string | null; // String
    taskId: string | null; // String
    taskRefName: string | null; // String
    workflowId: string | null; // String
  };
  ActionStartWorkflow: {
    // field return type
    correlationId: string | null; // String
    input: string | null; // String
    name: string | null; // String
    taskToDomain: string | null; // String
    version: number | null; // Int
  };
  AddBlueprintPayload: {
    // field return type
    blueprint: NexusGenRootTypes['Blueprint']; // Blueprint!
  };
  AddDevicePayload: {
    // field return type
    device: NexusGenRootTypes['Device']; // Device!
  };
  AddLocationPayload: {
    // field return type
    location: NexusGenRootTypes['Location']; // Location!
  };
  AddSnapshotPayload: {
    // field return type
    snapshot: NexusGenRootTypes['Snapshot'] | null; // Snapshot
  };
  AddZonePayload: {
    // field return type
    zone: NexusGenRootTypes['Zone']; // Zone!
  };
  ApplySnapshotPayload: {
    // field return type
    isOk: boolean; // Boolean!
    output: string; // String!
  };
  Blueprint: {
    // field return type
    createdAt: string; // String!
    id: string; // ID!
    name: string; // String!
    template: string; // String!
    updatedAt: string; // String!
  };
  BlueprintConnection: {
    // field return type
    edges: NexusGenRootTypes['BlueprintEdge'][]; // [BlueprintEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  BlueprintEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Blueprint']; // Blueprint!
  };
  BulkOperationResponse: {
    // field return type
    bulkErrorResults: string | null; // String
    bulkSuccessfulResults: string[] | null; // [String!]
  };
  CSVImport: {
    // field return type
    isOk: boolean | null; // Boolean
  };
  CalculatedDiffPayload: {
    // field return type
    result: NexusGenRootTypes['CalculatedDiffResult']; // CalculatedDiffResult!
  };
  CalculatedDiffResult: {
    // field return type
    createdData: NexusGenRootTypes['DiffData'][]; // [DiffData!]!
    deletedData: NexusGenRootTypes['DiffData'][]; // [DiffData!]!
    updatedData: NexusGenRootTypes['CalculatedUpdateDiffData'][]; // [CalculatedUpdateDiffData!]!
  };
  CalculatedUpdateDiffData: {
    // field return type
    actualData: string; // String!
    intendedData: string; // String!
    path: string; // String!
  };
  CloseTransactionPayload: {
    // field return type
    isOk: boolean; // Boolean!
  };
  CommitConfigOutput: {
    // field return type
    configuration: string | null; // String
    deviceId: string; // String!
    message: string | null; // String
  };
  CommitConfigPayload: {
    // field return type
    output: NexusGenRootTypes['CommitConfigOutput']; // CommitConfigOutput!
  };
  Country: {
    // field return type
    code: string; // String!
    id: string; // ID!
    name: string; // String!
  };
  CountryConnection: {
    // field return type
    edges: NexusGenRootTypes['CountryEdge'][]; // [CountryEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  CountryEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Country']; // Country!
  };
  CreateLabelPayload: {
    // field return type
    label: NexusGenRootTypes['Label'] | null; // Label
  };
  CreateTransactionPayload: {
    // field return type
    transactionId: string | null; // String
  };
  CreateWorkflowPayload: {
    // field return type
    workflow: NexusGenRootTypes['Workflow']; // Workflow!
  };
  DataStore: {
    // field return type
    config: string; // String!
    operational: string; // String!
    snapshots: NexusGenRootTypes['Snapshot'][]; // [Snapshot!]!
  };
  DeleteBlueprintPayload: {
    // field return type
    blueprint: NexusGenRootTypes['Blueprint'] | null; // Blueprint
  };
  DeleteDevicePayload: {
    // field return type
    device: NexusGenRootTypes['Device'] | null; // Device
  };
  DeleteLabelPayload: {
    // field return type
    label: NexusGenRootTypes['Label'] | null; // Label
  };
  DeleteSnapshotPayload: {
    // field return type
    snapshot: NexusGenRootTypes['Snapshot'] | null; // Snapshot
  };
  DeleteWorkflowPayload: {
    // field return type
    workflow: NexusGenRootTypes['Workflow']; // Workflow!
  };
  Device: {
    // field return type
    address: string | null; // String
    blueprint: NexusGenRootTypes['Blueprint'] | null; // Blueprint
    createdAt: string; // String!
    deviceSize: NexusGenEnums['DeviceSize']; // DeviceSize!
    id: string; // ID!
    isInstalled: boolean; // Boolean!
    labels: NexusGenRootTypes['LabelConnection']; // LabelConnection!
    location: NexusGenRootTypes['Location'] | null; // Location
    model: string | null; // String
    mountParameters: string | null; // String
    name: string; // String!
    port: number | null; // Int
    serviceState: NexusGenEnums['DeviceServiceState']; // DeviceServiceState!
    source: NexusGenEnums['DeviceSource']; // DeviceSource!
    updatedAt: string; // String!
    vendor: string | null; // String
    zone: NexusGenRootTypes['Zone']; // Zone!
  };
  DeviceConnection: {
    // field return type
    edges: NexusGenRootTypes['DeviceEdge'][]; // [DeviceEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  DeviceEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Device']; // Device!
  };
  DiffData: {
    // field return type
    data: string; // String!
    path: string; // String!
  };
  EdgeSourceTarget: {
    // field return type
    interface: string; // String!
    nodeId: string; // String!
  };
  EventHandler: {
    // field return type
    actions: NexusGenRootTypes['EventHandlerAction'][]; // [EventHandlerAction!]!
    condition: string | null; // String
    evaluatorType: string | null; // String
    event: string; // String!
    id: string; // ID!
    isActive: boolean | null; // Boolean
    name: string; // String!
  };
  EventHandlerAction: {
    // field return type
    action: NexusGenEnums['EventHandlerActionEnum'] | null; // EventHandlerActionEnum
    completeTask: NexusGenRootTypes['ActionCompleteTask'] | null; // ActionCompleteTask
    expandInlineJSON: boolean | null; // Boolean
    failTask: NexusGenRootTypes['ActionFailTask'] | null; // ActionFailTask
    startWorkflow: NexusGenRootTypes['ActionStartWorkflow'] | null; // ActionStartWorkflow
  };
  EventHandlerConnection: {
    // field return type
    edges: NexusGenRootTypes['EventHandlerEdge'][] | null; // [EventHandlerEdge!]
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  };
  EventHandlerEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['EventHandler']; // EventHandler!
  };
  ExecutedWorkflow: {
    // field return type
    correlationId: string | null; // String
    createdAt: string | null; // String
    createdBy: string | null; // String
    endTime: string | null; // String
    failedReferenceTaskNames: Array<string | null> | null; // [String]
    id: string; // ID!
    input: string | null; // String
    lastRetriedTime: string | null; // String
    output: string | null; // String
    ownerApp: string | null; // String
    parentWorkflowId: string | null; // String
    reasonForIncompletion: string | null; // String
    startTime: string | null; // String
    status: NexusGenEnums['ExecutedWorkflowStatus'] | null; // ExecutedWorkflowStatus
    tasks: NexusGenRootTypes['ExecutedWorkflowTask'][] | null; // [ExecutedWorkflowTask!]
    updatedAt: string | null; // String
    updatedBy: string | null; // String
    variables: string | null; // String
    workflowDefinition: NexusGenRootTypes['Workflow'] | null; // Workflow
    workflowId: string; // String!
    workflowName: string | null; // String
    workflowVersion: number | null; // Int
  };
  ExecutedWorkflowConnection: {
    // field return type
    edges: NexusGenRootTypes['ExecutedWorkflowEdge'][]; // [ExecutedWorkflowEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  ExecutedWorkflowEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['ExecutedWorkflow']; // ExecutedWorkflow!
  };
  ExecutedWorkflowTask: {
    // field return type
    callbackAfterSeconds: number | null; // Int
    endTime: string | null; // String
    executed: boolean | null; // Boolean
    externalInputPayloadStoragePath: string | null; // String
    externalOutputPayloadStoragePath: string | null; // String
    id: string; // ID!
    inputData: string | null; // String
    outputData: string | null; // String
    pollCount: number | null; // Int
    reasonForIncompletion: string | null; // String
    referenceTaskName: string | null; // String
    retried: boolean | null; // Boolean
    retryCount: number | null; // Int
    scheduledTime: string | null; // String
    seq: number | null; // Int
    startTime: string | null; // String
    status: NexusGenEnums['ExecutedWorkflowTaskStatus'] | null; // ExecutedWorkflowTaskStatus
    subWorkflowId: string | null; // String
    taskDefName: string | null; // String
    taskDefinition: string | null; // String
    taskId: string | null; // String
    taskType: string | null; // String
    updateTime: string | null; // String
    workflowType: string | null; // String
  };
  GraphEdge: {
    // field return type
    id: string; // ID!
    source: NexusGenRootTypes['EdgeSourceTarget']; // EdgeSourceTarget!
    target: NexusGenRootTypes['EdgeSourceTarget']; // EdgeSourceTarget!
    weight: number | null; // Int
  };
  GraphNode: {
    // field return type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    device: NexusGenRootTypes['Device']; // Device!
    deviceType: string | null; // String
    id: string; // ID!
    interfaces: NexusGenRootTypes['GraphNodeInterface'][]; // [GraphNodeInterface!]!
    softwareVersion: string | null; // String
  };
  GraphNodeCoordinates: {
    // field return type
    x: number; // Float!
    y: number; // Float!
  };
  GraphNodeInterface: {
    // field return type
    id: string; // String!
    name: string; // String!
    status: NexusGenEnums['GraphEdgeStatus']; // GraphEdgeStatus!
  };
  GraphVersionEdge: {
    // field return type
    id: string; // ID!
    source: NexusGenRootTypes['EdgeSourceTarget']; // EdgeSourceTarget!
    target: NexusGenRootTypes['EdgeSourceTarget']; // EdgeSourceTarget!
  };
  GraphVersionNode: {
    // field return type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    deviceType: string | null; // String
    id: string; // ID!
    interfaces: NexusGenRootTypes['GraphNodeInterface'][]; // [GraphNodeInterface!]!
    name: string; // String!
    softwareVersion: string | null; // String
  };
  InstallDevicePayload: {
    // field return type
    device: NexusGenRootTypes['Device']; // Device!
  };
  IsOkResponse: {
    // field return type
    isOk: boolean; // Boolean!
  };
  Label: {
    // field return type
    createdAt: string; // String!
    id: string; // ID!
    name: string; // String!
    updatedAt: string; // String!
  };
  LabelConnection: {
    // field return type
    edges: NexusGenRootTypes['LabelEdge'][]; // [LabelEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  LabelEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Label']; // Label!
  };
  Location: {
    // field return type
    country: string; // String!
    createdAt: string; // String!
    id: string; // ID!
    name: string; // String!
    updatedAt: string; // String!
  };
  LocationConnection: {
    // field return type
    edges: NexusGenRootTypes['LocationEdge'][]; // [LocationEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  LocationEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Location']; // Location!
  };
  Mutation: {
    // field return type
    addBlueprint: NexusGenRootTypes['AddBlueprintPayload']; // AddBlueprintPayload!
    addDevice: NexusGenRootTypes['AddDevicePayload']; // AddDevicePayload!
    addLocation: NexusGenRootTypes['AddLocationPayload']; // AddLocationPayload!
    addSnapshot: NexusGenRootTypes['AddSnapshotPayload'] | null; // AddSnapshotPayload
    addZone: NexusGenRootTypes['AddZonePayload']; // AddZonePayload!
    applySnapshot: NexusGenRootTypes['ApplySnapshotPayload']; // ApplySnapshotPayload!
    bulkPauseWorkflow: NexusGenRootTypes['BulkOperationResponse'] | null; // BulkOperationResponse
    bulkRestartWorkflow: NexusGenRootTypes['BulkOperationResponse'] | null; // BulkOperationResponse
    bulkResumeWorkflow: NexusGenRootTypes['BulkOperationResponse'] | null; // BulkOperationResponse
    bulkRetryWorkflow: NexusGenRootTypes['BulkOperationResponse'] | null; // BulkOperationResponse
    bulkTerminateWorkflow: NexusGenRootTypes['BulkOperationResponse'] | null; // BulkOperationResponse
    closeTransaction: NexusGenRootTypes['CloseTransactionPayload']; // CloseTransactionPayload!
    commitConfig: NexusGenRootTypes['CommitConfigPayload']; // CommitConfigPayload!
    createEventHandler: NexusGenRootTypes['EventHandler'] | null; // EventHandler
    createLabel: NexusGenRootTypes['CreateLabelPayload']; // CreateLabelPayload!
    createTaskDefinition: NexusGenRootTypes['TaskDefinition'] | null; // TaskDefinition
    createTransaction: NexusGenRootTypes['CreateTransactionPayload']; // CreateTransactionPayload!
    createWorkflow: NexusGenRootTypes['CreateWorkflowPayload']; // CreateWorkflowPayload!
    deleteBlueprint: NexusGenRootTypes['DeleteBlueprintPayload']; // DeleteBlueprintPayload!
    deleteDevice: NexusGenRootTypes['DeleteDevicePayload']; // DeleteDevicePayload!
    deleteEventHandler: NexusGenRootTypes['IsOkResponse'] | null; // IsOkResponse
    deleteLabel: NexusGenRootTypes['DeleteLabelPayload']; // DeleteLabelPayload!
    deleteSchedule: NexusGenRootTypes['IsOkResponse'] | null; // IsOkResponse
    deleteSnapshot: NexusGenRootTypes['DeleteSnapshotPayload'] | null; // DeleteSnapshotPayload
    deleteTask: NexusGenRootTypes['IsOkResponse'] | null; // IsOkResponse
    deleteWorkflow: NexusGenRootTypes['DeleteWorkflowPayload']; // DeleteWorkflowPayload!
    editWorkflowSchedule: NexusGenRootTypes['Schedule'] | null; // Schedule
    executeNewWorkflow: string | null; // String
    executeWorkflowByName: string | null; // String
    freeResource: string | null; // String
    importCSV: NexusGenRootTypes['CSVImport'] | null; // CSVImport
    installDevice: NexusGenRootTypes['InstallDevicePayload']; // InstallDevicePayload!
    pauseWorkflow: NexusGenRootTypes['IsOkResponse'] | null; // IsOkResponse
    removeWorkflow: NexusGenRootTypes['IsOkResponse'] | null; // IsOkResponse
    resetConfig: NexusGenRootTypes['ResetConfigPayload']; // ResetConfigPayload!
    restartWorkflow: NexusGenRootTypes['IsOkResponse'] | null; // IsOkResponse
    resumeWorkflow: NexusGenRootTypes['IsOkResponse'] | null; // IsOkResponse
    retryWorkflow: NexusGenRootTypes['IsOkResponse'] | null; // IsOkResponse
    revertChanges: NexusGenRootTypes['RevertChangesPayload']; // RevertChangesPayload!
    scheduleWorkflow: NexusGenRootTypes['Schedule'] | null; // Schedule
    syncFromNetwork: NexusGenRootTypes['SyncFromNetworkPayload']; // SyncFromNetworkPayload!
    terminateWorkflow: NexusGenRootTypes['IsOkResponse'] | null; // IsOkResponse
    uninstallDevice: NexusGenRootTypes['UninstallDevicePayload']; // UninstallDevicePayload!
    updateBlueprint: NexusGenRootTypes['UpdateBlueprintPayload']; // UpdateBlueprintPayload!
    updateDataStore: NexusGenRootTypes['UpdateDataStorePayload']; // UpdateDataStorePayload!
    updateDevice: NexusGenRootTypes['UpdateDevicePayload']; // UpdateDevicePayload!
    updateEventHandler: NexusGenRootTypes['EventHandler'] | null; // EventHandler
    updateGraphNodeCoordinates: NexusGenRootTypes['UpdateGraphNodeCoordinatesPayload']; // UpdateGraphNodeCoordinatesPayload!
    updateWorkflow: NexusGenRootTypes['UpdateWorkflowPayload']; // UpdateWorkflowPayload!
  };
  NetInterface: {
    // field return type
    id: string; // String!
    name: string; // String!
  };
  NetNetwork: {
    // field return type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    id: string; // String!
    subnet: string; // String!
  };
  NetNode: {
    // field return type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    id: string; // ID!
    interfaces: NexusGenRootTypes['NetInterface'][]; // [NetInterface!]!
    name: string; // String!
    networks: NexusGenRootTypes['NetNetwork'][]; // [NetNetwork!]!
    nodeId: string; // String!
  };
  NetRoutingPathNode: {
    // field return type
    nodes: NexusGenRootTypes['NetRoutingPathNodeInfo'][]; // [NetRoutingPathNodeInfo!]!
    weight: number | null; // Int
  };
  NetRoutingPathNodeInfo: {
    // field return type
    name: string | null; // String
    weight: number | null; // Int
  };
  NetTopology: {
    // field return type
    edges: NexusGenRootTypes['GraphEdge'][]; // [GraphEdge!]!
    nodes: NexusGenRootTypes['NetNode'][]; // [NetNode!]!
  };
  OutputParameter: {
    // field return type
    key: string; // String!
    value: string; // String!
  };
  PageInfo: {
    // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  };
  PollData: {
    // field return type
    domain: string | null; // String
    id: string; // ID!
    lastPollTime: string | null; // String
    queueName: string | null; // String
    workerId: string | null; // String
  };
  PollDataConnection: {
    // field return type
    edges: Array<NexusGenRootTypes['PollDataEdge'] | null> | null; // [PollDataEdge]
    pageInfo: NexusGenRootTypes['PageInfo'] | null; // PageInfo
    totalCount: number | null; // Int
  };
  PollDataEdge: {
    // field return type
    cursor: string | null; // String
    node: NexusGenRootTypes['PollData'] | null; // PollData
  };
  Pool: {
    // field return type
    id: string; // ID!
    name: string; // String!
    poolType: NexusGenEnums['PoolType']; // PoolType!
    resourceType: NexusGenRootTypes['ResourceType']; // ResourceType!
    tags: NexusGenRootTypes['Tag'][]; // [Tag!]!
  };
  PoolConnection: {
    // field return type
    edges: NexusGenRootTypes['PoolEdge'][]; // [PoolEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  PoolEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Pool']; // Pool!
  };
  Query: {
    // field return type
    blueprints: NexusGenRootTypes['BlueprintConnection']; // BlueprintConnection!
    calculatedDiff: NexusGenRootTypes['CalculatedDiffPayload']; // CalculatedDiffPayload!
    countries: NexusGenRootTypes['CountryConnection']; // CountryConnection!
    dataStore: NexusGenRootTypes['DataStore'] | null; // DataStore
    devices: NexusGenRootTypes['DeviceConnection']; // DeviceConnection!
    eventHandler: NexusGenRootTypes['EventHandler'] | null; // EventHandler
    eventHandlers: NexusGenRootTypes['EventHandlerConnection'] | null; // EventHandlerConnection
    eventHandlersByEvent: NexusGenRootTypes['EventHandlerConnection'] | null; // EventHandlerConnection
    executedWorkflows: NexusGenRootTypes['ExecutedWorkflowConnection'] | null; // ExecutedWorkflowConnection
    labels: NexusGenRootTypes['LabelConnection']; // LabelConnection!
    locations: NexusGenRootTypes['LocationConnection']; // LocationConnection!
    netTopology: NexusGenRootTypes['NetTopology'] | null; // NetTopology
    node: NexusGenRootTypes['Node'] | null; // Node
    pollData: NexusGenRootTypes['PollDataConnection'] | null; // PollDataConnection
    pools: NexusGenRootTypes['PoolConnection']; // PoolConnection!
    schedules: NexusGenRootTypes['ScheduleConnection']; // ScheduleConnection!
    shortestPath: NexusGenRootTypes['NetRoutingPathNode'][]; // [NetRoutingPathNode!]!
    taskDefinitions: NexusGenRootTypes['TaskDefinitionConnection']; // TaskDefinitionConnection!
    topology: NexusGenRootTypes['Topology'] | null; // Topology
    topologyCommonNodes: NexusGenRootTypes['TopologyCommonNodes'] | null; // TopologyCommonNodes
    topologyVersionData: NexusGenRootTypes['TopologyVersionData']; // TopologyVersionData!
    topologyVersions: string[] | null; // [String!]
    transactions: NexusGenRootTypes['Transaction'][]; // [Transaction!]!
    uniconfigShellSession: string | null; // String
    workflowInstanceDetail: NexusGenRootTypes['WorkflowInstanceDetail'] | null; // WorkflowInstanceDetail
    workflowLabels: string[]; // [String!]!
    workflows: NexusGenRootTypes['WorkflowConnection']; // WorkflowConnection!
    zones: NexusGenRootTypes['ZonesConnection']; // ZonesConnection!
  };
  ResetConfigPayload: {
    // field return type
    dataStore: NexusGenRootTypes['DataStore']; // DataStore!
  };
  ResourceType: {
    // field return type
    id: string; // ID!
    name: string; // String!
  };
  RevertChangesPayload: {
    // field return type
    isOk: boolean; // Boolean!
  };
  Schedule: {
    // field return type
    cronString: string; // String!
    id: string; // ID!
    isEnabled: boolean; // Boolean!
    name: string; // String!
    parallelRuns: boolean; // Boolean!
    performFromDate: string; // String!
    performTillDate: string; // String!
    status: NexusGenEnums['ScheduleStatus']; // ScheduleStatus!
    workflowContext: string; // String!
    workflowName: string; // String!
    workflowVersion: string; // String!
  };
  ScheduleConnection: {
    // field return type
    edges: Array<NexusGenRootTypes['ScheduleEdge'] | null>; // [ScheduleEdge]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  ScheduleEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Schedule']; // Schedule!
  };
  Snapshot: {
    // field return type
    createdAt: string; // String!
    name: string; // String!
  };
  SubWorkflow: {
    // field return type
    executedWorkflowDetail: NexusGenRootTypes['ExecutedWorkflow']; // ExecutedWorkflow!
    referenceTaskName: string; // String!
    workflowDetail: NexusGenRootTypes['Workflow']; // Workflow!
  };
  Subscription: {
    // field return type
    controlExecutedWorkflow: NexusGenRootTypes['ExecutedWorkflow'] | null; // ExecutedWorkflow
    uniconfigShell: string | null; // String
  };
  SyncFromNetworkPayload: {
    // field return type
    dataStore: NexusGenRootTypes['DataStore'] | null; // DataStore
  };
  Tag: {
    // field return type
    id: string; // ID!
    tag: string; // String!
  };
  TaskDefinition: {
    // field return type
    concurrentExecLimit: number | null; // Int
    createdAt: string | null; // String
    createdBy: string | null; // String
    description: string | null; // String
    id: string; // ID!
    inputKeys: string[] | null; // [String!]
    inputTemplate: string | null; // String
    name: string; // String!
    outputKeys: string[] | null; // [String!]
    ownerEmail: string | null; // String
    pollTimeoutSeconds: number | null; // Int
    rateLimitFrequencyInSeconds: number | null; // Int
    rateLimitPerFrequency: number | null; // Int
    responseTimeoutSeconds: number | null; // Int
    retryCount: number | null; // Int
    retryDelaySeconds: number | null; // Int
    retryLogic: NexusGenEnums['RetryLogic'] | null; // RetryLogic
    timeoutPolicy: NexusGenEnums['TaskTimeoutPolicy'] | null; // TaskTimeoutPolicy
    timeoutSeconds: number; // Int!
    updatedAt: string | null; // String
    updatedBy: string | null; // String
  };
  TaskDefinitionConnection: {
    // field return type
    edges: NexusGenRootTypes['TaskDefinitionEdge'][]; // [TaskDefinitionEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  TaskDefinitionEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['TaskDefinition']; // TaskDefinition!
  };
  Topology: {
    // field return type
    edges: NexusGenRootTypes['GraphEdge'][]; // [GraphEdge!]!
    nodes: NexusGenRootTypes['GraphNode'][]; // [GraphNode!]!
  };
  TopologyCommonNodes: {
    // field return type
    commonNodes: string[]; // [String!]!
  };
  TopologyVersionData: {
    // field return type
    edges: NexusGenRootTypes['GraphVersionEdge'][]; // [GraphVersionEdge!]!
    nodes: NexusGenRootTypes['GraphVersionNode'][]; // [GraphVersionNode!]!
  };
  Transaction: {
    // field return type
    changes: NexusGenRootTypes['TransactionChange'][]; // [TransactionChange!]!
    lastCommitTime: string; // String!
    transactionId: string; // String!
  };
  TransactionChange: {
    // field return type
    device: NexusGenRootTypes['Device']; // Device!
    diff: NexusGenRootTypes['TransactionDiff'][]; // [TransactionDiff!]!
  };
  TransactionDiff: {
    // field return type
    dataAfter: string | null; // String
    dataBefore: string | null; // String
    path: string; // String!
  };
  UninstallDevicePayload: {
    // field return type
    device: NexusGenRootTypes['Device']; // Device!
  };
  UpdateBlueprintPayload: {
    // field return type
    blueprint: NexusGenRootTypes['Blueprint']; // Blueprint!
  };
  UpdateDataStorePayload: {
    // field return type
    dataStore: NexusGenRootTypes['DataStore']; // DataStore!
  };
  UpdateDeviceMetadataPayload: {
    // field return type
    devices: Array<NexusGenRootTypes['Device'] | null> | null; // [Device]
  };
  UpdateDevicePayload: {
    // field return type
    device: NexusGenRootTypes['Device'] | null; // Device
  };
  UpdateGraphNodeCoordinatesPayload: {
    // field return type
    deviceNames: string[]; // [String!]!
  };
  UpdateWorkflowPayload: {
    // field return type
    workflow: NexusGenRootTypes['Workflow']; // Workflow!
  };
  Workflow: {
    // field return type
    createdAt: string | null; // String
    createdBy: string | null; // String
    description: string | null; // String
    hasSchedule: boolean | null; // Boolean
    id: string; // ID!
    inputParameters: string[] | null; // [String!]
    name: string; // String!
    outputParameters: NexusGenRootTypes['OutputParameter'][] | null; // [OutputParameter!]
    restartable: boolean | null; // Boolean
    tasks: string | null; // String
    timeoutPolicy: NexusGenEnums['TimeoutPolicy'] | null; // TimeoutPolicy
    timeoutSeconds: number; // Int!
    updatedAt: string | null; // String
    updatedBy: string | null; // String
    version: number | null; // Int
  };
  WorkflowConnection: {
    // field return type
    edges: NexusGenRootTypes['WorkflowEdge'][]; // [WorkflowEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  WorkflowEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Workflow']; // Workflow!
  };
  WorkflowInstanceDetail: {
    // field return type
    meta: NexusGenRootTypes['Workflow'] | null; // Workflow
    result: NexusGenRootTypes['ExecutedWorkflow']; // ExecutedWorkflow!
    subworkflows: NexusGenRootTypes['SubWorkflow'][] | null; // [SubWorkflow!]
  };
  Zone: {
    // field return type
    createdAt: string; // String!
    id: string; // ID!
    name: string; // String!
    updatedAt: string; // String!
  };
  ZoneEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Zone']; // Zone!
  };
  ZonesConnection: {
    // field return type
    edges: NexusGenRootTypes['ZoneEdge'][]; // [ZoneEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  BaseGraphNode: {
    // field return type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    deviceType: string | null; // String
    id: string; // ID!
    interfaces: NexusGenRootTypes['GraphNodeInterface'][]; // [GraphNodeInterface!]!
    softwareVersion: string | null; // String
  };
  Node: {
    // field return type
    id: string; // ID!
  };
}

export interface NexusGenFieldTypeNames {
  ActionCompleteTask: {
    // field return type name
    output: 'String';
    taskId: 'String';
    taskRefName: 'String';
    workflowId: 'String';
  };
  ActionFailTask: {
    // field return type name
    output: 'String';
    taskId: 'String';
    taskRefName: 'String';
    workflowId: 'String';
  };
  ActionStartWorkflow: {
    // field return type name
    correlationId: 'String';
    input: 'String';
    name: 'String';
    taskToDomain: 'String';
    version: 'Int';
  };
  AddBlueprintPayload: {
    // field return type name
    blueprint: 'Blueprint';
  };
  AddDevicePayload: {
    // field return type name
    device: 'Device';
  };
  AddLocationPayload: {
    // field return type name
    location: 'Location';
  };
  AddSnapshotPayload: {
    // field return type name
    snapshot: 'Snapshot';
  };
  AddZonePayload: {
    // field return type name
    zone: 'Zone';
  };
  ApplySnapshotPayload: {
    // field return type name
    isOk: 'Boolean';
    output: 'String';
  };
  Blueprint: {
    // field return type name
    createdAt: 'String';
    id: 'ID';
    name: 'String';
    template: 'String';
    updatedAt: 'String';
  };
  BlueprintConnection: {
    // field return type name
    edges: 'BlueprintEdge';
    pageInfo: 'PageInfo';
    totalCount: 'Int';
  };
  BlueprintEdge: {
    // field return type name
    cursor: 'String';
    node: 'Blueprint';
  };
  BulkOperationResponse: {
    // field return type name
    bulkErrorResults: 'String';
    bulkSuccessfulResults: 'String';
  };
  CSVImport: {
    // field return type name
    isOk: 'Boolean';
  };
  CalculatedDiffPayload: {
    // field return type name
    result: 'CalculatedDiffResult';
  };
  CalculatedDiffResult: {
    // field return type name
    createdData: 'DiffData';
    deletedData: 'DiffData';
    updatedData: 'CalculatedUpdateDiffData';
  };
  CalculatedUpdateDiffData: {
    // field return type name
    actualData: 'String';
    intendedData: 'String';
    path: 'String';
  };
  CloseTransactionPayload: {
    // field return type name
    isOk: 'Boolean';
  };
  CommitConfigOutput: {
    // field return type name
    configuration: 'String';
    deviceId: 'String';
    message: 'String';
  };
  CommitConfigPayload: {
    // field return type name
    output: 'CommitConfigOutput';
  };
  Country: {
    // field return type name
    code: 'String';
    id: 'ID';
    name: 'String';
  };
  CountryConnection: {
    // field return type name
    edges: 'CountryEdge';
    pageInfo: 'PageInfo';
    totalCount: 'Int';
  };
  CountryEdge: {
    // field return type name
    cursor: 'String';
    node: 'Country';
  };
  CreateLabelPayload: {
    // field return type name
    label: 'Label';
  };
  CreateTransactionPayload: {
    // field return type name
    transactionId: 'String';
  };
  CreateWorkflowPayload: {
    // field return type name
    workflow: 'Workflow';
  };
  DataStore: {
    // field return type name
    config: 'String';
    operational: 'String';
    snapshots: 'Snapshot';
  };
  DeleteBlueprintPayload: {
    // field return type name
    blueprint: 'Blueprint';
  };
  DeleteDevicePayload: {
    // field return type name
    device: 'Device';
  };
  DeleteLabelPayload: {
    // field return type name
    label: 'Label';
  };
  DeleteSnapshotPayload: {
    // field return type name
    snapshot: 'Snapshot';
  };
  DeleteWorkflowPayload: {
    // field return type name
    workflow: 'Workflow';
  };
  Device: {
    // field return type name
    address: 'String';
    blueprint: 'Blueprint';
    createdAt: 'String';
    deviceSize: 'DeviceSize';
    id: 'ID';
    isInstalled: 'Boolean';
    labels: 'LabelConnection';
    location: 'Location';
    model: 'String';
    mountParameters: 'String';
    name: 'String';
    port: 'Int';
    serviceState: 'DeviceServiceState';
    source: 'DeviceSource';
    updatedAt: 'String';
    vendor: 'String';
    zone: 'Zone';
  };
  DeviceConnection: {
    // field return type name
    edges: 'DeviceEdge';
    pageInfo: 'PageInfo';
    totalCount: 'Int';
  };
  DeviceEdge: {
    // field return type name
    cursor: 'String';
    node: 'Device';
  };
  DiffData: {
    // field return type name
    data: 'String';
    path: 'String';
  };
  EdgeSourceTarget: {
    // field return type name
    interface: 'String';
    nodeId: 'String';
  };
  EventHandler: {
    // field return type name
    actions: 'EventHandlerAction';
    condition: 'String';
    evaluatorType: 'String';
    event: 'String';
    id: 'ID';
    isActive: 'Boolean';
    name: 'String';
  };
  EventHandlerAction: {
    // field return type name
    action: 'EventHandlerActionEnum';
    completeTask: 'ActionCompleteTask';
    expandInlineJSON: 'Boolean';
    failTask: 'ActionFailTask';
    startWorkflow: 'ActionStartWorkflow';
  };
  EventHandlerConnection: {
    // field return type name
    edges: 'EventHandlerEdge';
    pageInfo: 'PageInfo';
  };
  EventHandlerEdge: {
    // field return type name
    cursor: 'String';
    node: 'EventHandler';
  };
  ExecutedWorkflow: {
    // field return type name
    correlationId: 'String';
    createdAt: 'String';
    createdBy: 'String';
    endTime: 'String';
    failedReferenceTaskNames: 'String';
    id: 'ID';
    input: 'String';
    lastRetriedTime: 'String';
    output: 'String';
    ownerApp: 'String';
    parentWorkflowId: 'String';
    reasonForIncompletion: 'String';
    startTime: 'String';
    status: 'ExecutedWorkflowStatus';
    tasks: 'ExecutedWorkflowTask';
    updatedAt: 'String';
    updatedBy: 'String';
    variables: 'String';
    workflowDefinition: 'Workflow';
    workflowId: 'String';
    workflowName: 'String';
    workflowVersion: 'Int';
  };
  ExecutedWorkflowConnection: {
    // field return type name
    edges: 'ExecutedWorkflowEdge';
    pageInfo: 'PageInfo';
    totalCount: 'Int';
  };
  ExecutedWorkflowEdge: {
    // field return type name
    cursor: 'String';
    node: 'ExecutedWorkflow';
  };
  ExecutedWorkflowTask: {
    // field return type name
    callbackAfterSeconds: 'Int';
    endTime: 'String';
    executed: 'Boolean';
    externalInputPayloadStoragePath: 'String';
    externalOutputPayloadStoragePath: 'String';
    id: 'ID';
    inputData: 'String';
    outputData: 'String';
    pollCount: 'Int';
    reasonForIncompletion: 'String';
    referenceTaskName: 'String';
    retried: 'Boolean';
    retryCount: 'Int';
    scheduledTime: 'String';
    seq: 'Int';
    startTime: 'String';
    status: 'ExecutedWorkflowTaskStatus';
    subWorkflowId: 'String';
    taskDefName: 'String';
    taskDefinition: 'String';
    taskId: 'String';
    taskType: 'String';
    updateTime: 'String';
    workflowType: 'String';
  };
  GraphEdge: {
    // field return type name
    id: 'ID';
    source: 'EdgeSourceTarget';
    target: 'EdgeSourceTarget';
    weight: 'Int';
  };
  GraphNode: {
    // field return type name
    coordinates: 'GraphNodeCoordinates';
    device: 'Device';
    deviceType: 'String';
    id: 'ID';
    interfaces: 'GraphNodeInterface';
    softwareVersion: 'String';
  };
  GraphNodeCoordinates: {
    // field return type name
    x: 'Float';
    y: 'Float';
  };
  GraphNodeInterface: {
    // field return type name
    id: 'String';
    name: 'String';
    status: 'GraphEdgeStatus';
  };
  GraphVersionEdge: {
    // field return type name
    id: 'ID';
    source: 'EdgeSourceTarget';
    target: 'EdgeSourceTarget';
  };
  GraphVersionNode: {
    // field return type name
    coordinates: 'GraphNodeCoordinates';
    deviceType: 'String';
    id: 'ID';
    interfaces: 'GraphNodeInterface';
    name: 'String';
    softwareVersion: 'String';
  };
  InstallDevicePayload: {
    // field return type name
    device: 'Device';
  };
  IsOkResponse: {
    // field return type name
    isOk: 'Boolean';
  };
  Label: {
    // field return type name
    createdAt: 'String';
    id: 'ID';
    name: 'String';
    updatedAt: 'String';
  };
  LabelConnection: {
    // field return type name
    edges: 'LabelEdge';
    pageInfo: 'PageInfo';
    totalCount: 'Int';
  };
  LabelEdge: {
    // field return type name
    cursor: 'String';
    node: 'Label';
  };
  Location: {
    // field return type name
    country: 'String';
    createdAt: 'String';
    id: 'ID';
    name: 'String';
    updatedAt: 'String';
  };
  LocationConnection: {
    // field return type name
    edges: 'LocationEdge';
    pageInfo: 'PageInfo';
    totalCount: 'Int';
  };
  LocationEdge: {
    // field return type name
    cursor: 'String';
    node: 'Location';
  };
  Mutation: {
    // field return type name
    addBlueprint: 'AddBlueprintPayload';
    addDevice: 'AddDevicePayload';
    addLocation: 'AddLocationPayload';
    addSnapshot: 'AddSnapshotPayload';
    addZone: 'AddZonePayload';
    applySnapshot: 'ApplySnapshotPayload';
    bulkPauseWorkflow: 'BulkOperationResponse';
    bulkRestartWorkflow: 'BulkOperationResponse';
    bulkResumeWorkflow: 'BulkOperationResponse';
    bulkRetryWorkflow: 'BulkOperationResponse';
    bulkTerminateWorkflow: 'BulkOperationResponse';
    closeTransaction: 'CloseTransactionPayload';
    commitConfig: 'CommitConfigPayload';
    createEventHandler: 'EventHandler';
    createLabel: 'CreateLabelPayload';
    createTaskDefinition: 'TaskDefinition';
    createTransaction: 'CreateTransactionPayload';
    createWorkflow: 'CreateWorkflowPayload';
    deleteBlueprint: 'DeleteBlueprintPayload';
    deleteDevice: 'DeleteDevicePayload';
    deleteEventHandler: 'IsOkResponse';
    deleteLabel: 'DeleteLabelPayload';
    deleteSchedule: 'IsOkResponse';
    deleteSnapshot: 'DeleteSnapshotPayload';
    deleteTask: 'IsOkResponse';
    deleteWorkflow: 'DeleteWorkflowPayload';
    editWorkflowSchedule: 'Schedule';
    executeNewWorkflow: 'String';
    executeWorkflowByName: 'String';
    freeResource: 'String';
    importCSV: 'CSVImport';
    installDevice: 'InstallDevicePayload';
    pauseWorkflow: 'IsOkResponse';
    removeWorkflow: 'IsOkResponse';
    resetConfig: 'ResetConfigPayload';
    restartWorkflow: 'IsOkResponse';
    resumeWorkflow: 'IsOkResponse';
    retryWorkflow: 'IsOkResponse';
    revertChanges: 'RevertChangesPayload';
    scheduleWorkflow: 'Schedule';
    syncFromNetwork: 'SyncFromNetworkPayload';
    terminateWorkflow: 'IsOkResponse';
    uninstallDevice: 'UninstallDevicePayload';
    updateBlueprint: 'UpdateBlueprintPayload';
    updateDataStore: 'UpdateDataStorePayload';
    updateDevice: 'UpdateDevicePayload';
    updateEventHandler: 'EventHandler';
    updateGraphNodeCoordinates: 'UpdateGraphNodeCoordinatesPayload';
    updateWorkflow: 'UpdateWorkflowPayload';
  };
  NetInterface: {
    // field return type name
    id: 'String';
    name: 'String';
  };
  NetNetwork: {
    // field return type name
    coordinates: 'GraphNodeCoordinates';
    id: 'String';
    subnet: 'String';
  };
  NetNode: {
    // field return type name
    coordinates: 'GraphNodeCoordinates';
    id: 'ID';
    interfaces: 'NetInterface';
    name: 'String';
    networks: 'NetNetwork';
    nodeId: 'String';
  };
  NetRoutingPathNode: {
    // field return type name
    nodes: 'NetRoutingPathNodeInfo';
    weight: 'Int';
  };
  NetRoutingPathNodeInfo: {
    // field return type name
    name: 'String';
    weight: 'Int';
  };
  NetTopology: {
    // field return type name
    edges: 'GraphEdge';
    nodes: 'NetNode';
  };
  OutputParameter: {
    // field return type name
    key: 'String';
    value: 'String';
  };
  PageInfo: {
    // field return type name
    endCursor: 'String';
    hasNextPage: 'Boolean';
    hasPreviousPage: 'Boolean';
    startCursor: 'String';
  };
  PollData: {
    // field return type name
    domain: 'String';
    id: 'ID';
    lastPollTime: 'String';
    queueName: 'String';
    workerId: 'String';
  };
  PollDataConnection: {
    // field return type name
    edges: 'PollDataEdge';
    pageInfo: 'PageInfo';
    totalCount: 'Int';
  };
  PollDataEdge: {
    // field return type name
    cursor: 'String';
    node: 'PollData';
  };
  Pool: {
    // field return type name
    id: 'ID';
    name: 'String';
    poolType: 'PoolType';
    resourceType: 'ResourceType';
    tags: 'Tag';
  };
  PoolConnection: {
    // field return type name
    edges: 'PoolEdge';
    pageInfo: 'PageInfo';
    totalCount: 'Int';
  };
  PoolEdge: {
    // field return type name
    cursor: 'String';
    node: 'Pool';
  };
  Query: {
    // field return type name
    blueprints: 'BlueprintConnection';
    calculatedDiff: 'CalculatedDiffPayload';
    countries: 'CountryConnection';
    dataStore: 'DataStore';
    devices: 'DeviceConnection';
    eventHandler: 'EventHandler';
    eventHandlers: 'EventHandlerConnection';
    eventHandlersByEvent: 'EventHandlerConnection';
    executedWorkflows: 'ExecutedWorkflowConnection';
    labels: 'LabelConnection';
    locations: 'LocationConnection';
    netTopology: 'NetTopology';
    node: 'Node';
    pollData: 'PollDataConnection';
    pools: 'PoolConnection';
    schedules: 'ScheduleConnection';
    shortestPath: 'NetRoutingPathNode';
    taskDefinitions: 'TaskDefinitionConnection';
    topology: 'Topology';
    topologyCommonNodes: 'TopologyCommonNodes';
    topologyVersionData: 'TopologyVersionData';
    topologyVersions: 'String';
    transactions: 'Transaction';
    uniconfigShellSession: 'String';
    workflowInstanceDetail: 'WorkflowInstanceDetail';
    workflowLabels: 'String';
    workflows: 'WorkflowConnection';
    zones: 'ZonesConnection';
  };
  ResetConfigPayload: {
    // field return type name
    dataStore: 'DataStore';
  };
  ResourceType: {
    // field return type name
    id: 'ID';
    name: 'String';
  };
  RevertChangesPayload: {
    // field return type name
    isOk: 'Boolean';
  };
  Schedule: {
    // field return type name
    cronString: 'String';
    id: 'ID';
    isEnabled: 'Boolean';
    name: 'String';
    parallelRuns: 'Boolean';
    performFromDate: 'String';
    performTillDate: 'String';
    status: 'ScheduleStatus';
    workflowContext: 'String';
    workflowName: 'String';
    workflowVersion: 'String';
  };
  ScheduleConnection: {
    // field return type name
    edges: 'ScheduleEdge';
    pageInfo: 'PageInfo';
    totalCount: 'Int';
  };
  ScheduleEdge: {
    // field return type name
    cursor: 'String';
    node: 'Schedule';
  };
  Snapshot: {
    // field return type name
    createdAt: 'String';
    name: 'String';
  };
  SubWorkflow: {
    // field return type name
    executedWorkflowDetail: 'ExecutedWorkflow';
    referenceTaskName: 'String';
    workflowDetail: 'Workflow';
  };
  Subscription: {
    // field return type name
    controlExecutedWorkflow: 'ExecutedWorkflow';
    uniconfigShell: 'String';
  };
  SyncFromNetworkPayload: {
    // field return type name
    dataStore: 'DataStore';
  };
  Tag: {
    // field return type name
    id: 'ID';
    tag: 'String';
  };
  TaskDefinition: {
    // field return type name
    concurrentExecLimit: 'Int';
    createdAt: 'String';
    createdBy: 'String';
    description: 'String';
    id: 'ID';
    inputKeys: 'String';
    inputTemplate: 'String';
    name: 'String';
    outputKeys: 'String';
    ownerEmail: 'String';
    pollTimeoutSeconds: 'Int';
    rateLimitFrequencyInSeconds: 'Int';
    rateLimitPerFrequency: 'Int';
    responseTimeoutSeconds: 'Int';
    retryCount: 'Int';
    retryDelaySeconds: 'Int';
    retryLogic: 'RetryLogic';
    timeoutPolicy: 'TaskTimeoutPolicy';
    timeoutSeconds: 'Int';
    updatedAt: 'String';
    updatedBy: 'String';
  };
  TaskDefinitionConnection: {
    // field return type name
    edges: 'TaskDefinitionEdge';
    pageInfo: 'PageInfo';
    totalCount: 'Int';
  };
  TaskDefinitionEdge: {
    // field return type name
    cursor: 'String';
    node: 'TaskDefinition';
  };
  Topology: {
    // field return type name
    edges: 'GraphEdge';
    nodes: 'GraphNode';
  };
  TopologyCommonNodes: {
    // field return type name
    commonNodes: 'String';
  };
  TopologyVersionData: {
    // field return type name
    edges: 'GraphVersionEdge';
    nodes: 'GraphVersionNode';
  };
  Transaction: {
    // field return type name
    changes: 'TransactionChange';
    lastCommitTime: 'String';
    transactionId: 'String';
  };
  TransactionChange: {
    // field return type name
    device: 'Device';
    diff: 'TransactionDiff';
  };
  TransactionDiff: {
    // field return type name
    dataAfter: 'String';
    dataBefore: 'String';
    path: 'String';
  };
  UninstallDevicePayload: {
    // field return type name
    device: 'Device';
  };
  UpdateBlueprintPayload: {
    // field return type name
    blueprint: 'Blueprint';
  };
  UpdateDataStorePayload: {
    // field return type name
    dataStore: 'DataStore';
  };
  UpdateDeviceMetadataPayload: {
    // field return type name
    devices: 'Device';
  };
  UpdateDevicePayload: {
    // field return type name
    device: 'Device';
  };
  UpdateGraphNodeCoordinatesPayload: {
    // field return type name
    deviceNames: 'String';
  };
  UpdateWorkflowPayload: {
    // field return type name
    workflow: 'Workflow';
  };
  Workflow: {
    // field return type name
    createdAt: 'String';
    createdBy: 'String';
    description: 'String';
    hasSchedule: 'Boolean';
    id: 'ID';
    inputParameters: 'String';
    name: 'String';
    outputParameters: 'OutputParameter';
    restartable: 'Boolean';
    tasks: 'String';
    timeoutPolicy: 'TimeoutPolicy';
    timeoutSeconds: 'Int';
    updatedAt: 'String';
    updatedBy: 'String';
    version: 'Int';
  };
  WorkflowConnection: {
    // field return type name
    edges: 'WorkflowEdge';
    pageInfo: 'PageInfo';
    totalCount: 'Int';
  };
  WorkflowEdge: {
    // field return type name
    cursor: 'String';
    node: 'Workflow';
  };
  WorkflowInstanceDetail: {
    // field return type name
    meta: 'Workflow';
    result: 'ExecutedWorkflow';
    subworkflows: 'SubWorkflow';
  };
  Zone: {
    // field return type name
    createdAt: 'String';
    id: 'ID';
    name: 'String';
    updatedAt: 'String';
  };
  ZoneEdge: {
    // field return type name
    cursor: 'String';
    node: 'Zone';
  };
  ZonesConnection: {
    // field return type name
    edges: 'ZoneEdge';
    pageInfo: 'PageInfo';
    totalCount: 'Int';
  };
  BaseGraphNode: {
    // field return type name
    coordinates: 'GraphNodeCoordinates';
    deviceType: 'String';
    id: 'ID';
    interfaces: 'GraphNodeInterface';
    softwareVersion: 'String';
  };
  Node: {
    // field return type name
    id: 'ID';
  };
}

export interface NexusGenArgTypes {
  Device: {
    labels: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    };
  };
  Mutation: {
    addBlueprint: {
      // args
      input: NexusGenInputs['AddBlueprintInput']; // AddBlueprintInput!
    };
    addDevice: {
      // args
      input: NexusGenInputs['AddDeviceInput']; // AddDeviceInput!
    };
    addLocation: {
      // args
      input: NexusGenInputs['AddLocationInput']; // AddLocationInput!
    };
    addSnapshot: {
      // args
      input: NexusGenInputs['AddSnapshotInput']; // AddSnapshotInput!
      transactionId: string; // String!
    };
    addZone: {
      // args
      input: NexusGenInputs['AddZoneInput']; // AddZoneInput!
    };
    applySnapshot: {
      // args
      input: NexusGenInputs['ApplySnapshotInput']; // ApplySnapshotInput!
      transactionId: string; // String!
    };
    bulkPauseWorkflow: {
      // args
      input: NexusGenInputs['BulkOperationInput']; // BulkOperationInput!
    };
    bulkRestartWorkflow: {
      // args
      input: NexusGenInputs['BulkOperationInput']; // BulkOperationInput!
    };
    bulkResumeWorkflow: {
      // args
      input: NexusGenInputs['BulkOperationInput']; // BulkOperationInput!
    };
    bulkRetryWorkflow: {
      // args
      input: NexusGenInputs['BulkOperationInput']; // BulkOperationInput!
    };
    bulkTerminateWorkflow: {
      // args
      input: NexusGenInputs['BulkOperationInput']; // BulkOperationInput!
    };
    closeTransaction: {
      // args
      deviceId: string; // String!
      transactionId: string; // String!
    };
    commitConfig: {
      // args
      input: NexusGenInputs['CommitConfigInput']; // CommitConfigInput!
      transactionId: string; // String!
    };
    createEventHandler: {
      // args
      input: NexusGenInputs['CreateEventHandlerInput']; // CreateEventHandlerInput!
    };
    createLabel: {
      // args
      input: NexusGenInputs['CreateLabelInput']; // CreateLabelInput!
    };
    createTaskDefinition: {
      // args
      input: NexusGenInputs['CreateTaskDefinitionInput']; // CreateTaskDefinitionInput!
    };
    createTransaction: {
      // args
      deviceId: string; // String!
    };
    createWorkflow: {
      // args
      input: NexusGenInputs['CreateWorkflowInput']; // CreateWorkflowInput!
    };
    deleteBlueprint: {
      // args
      id: string; // String!
    };
    deleteDevice: {
      // args
      id: string; // String!
    };
    deleteEventHandler: {
      // args
      id: string; // String!
    };
    deleteLabel: {
      // args
      id: string; // String!
    };
    deleteSchedule: {
      // args
      id: string; // String!
    };
    deleteSnapshot: {
      // args
      input: NexusGenInputs['DeleteSnapshotInput']; // DeleteSnapshotInput!
    };
    deleteTask: {
      // args
      name: string; // String!
    };
    deleteWorkflow: {
      // args
      input: NexusGenInputs['DeleteWorkflowInput']; // DeleteWorkflowInput!
    };
    editWorkflowSchedule: {
      // args
      id: string; // String!
      input: NexusGenInputs['EditWorkflowScheduleInput']; // EditWorkflowScheduleInput!
    };
    executeNewWorkflow: {
      // args
      input: NexusGenInputs['StartWorkflowRequestInput']; // StartWorkflowRequestInput!
    };
    executeWorkflowByName: {
      // args
      input: NexusGenInputs['ExecuteWorkflowByName']; // ExecuteWorkflowByName!
    };
    freeResource: {
      // args
      input: NexusGenInputs['FreeResourceInput']; // FreeResourceInput!
    };
    importCSV: {
      // args
      input: NexusGenInputs['CSVImportInput']; // CSVImportInput!
    };
    installDevice: {
      // args
      id: string; // String!
    };
    pauseWorkflow: {
      // args
      id: string; // String!
    };
    removeWorkflow: {
      // args
      id: string; // String!
      input?: NexusGenInputs['RemoveWorkflowInput'] | null; // RemoveWorkflowInput
    };
    resetConfig: {
      // args
      deviceId: string; // String!
      transactionId: string; // String!
    };
    restartWorkflow: {
      // args
      id: string; // String!
      input?: NexusGenInputs['RestartWorkflowInput'] | null; // RestartWorkflowInput
    };
    resumeWorkflow: {
      // args
      id: string; // String!
    };
    retryWorkflow: {
      // args
      id: string; // String!
      input?: NexusGenInputs['RetryWorkflowInput'] | null; // RetryWorkflowInput
    };
    revertChanges: {
      // args
      transactionId: string; // String!
    };
    scheduleWorkflow: {
      // args
      input: NexusGenInputs['CreateScheduleInput']; // CreateScheduleInput!
    };
    syncFromNetwork: {
      // args
      deviceId: string; // String!
      transactionId: string; // String!
    };
    terminateWorkflow: {
      // args
      id: string; // String!
      input?: NexusGenInputs['TerminateWorkflowInput'] | null; // TerminateWorkflowInput
    };
    uninstallDevice: {
      // args
      id: string; // String!
    };
    updateBlueprint: {
      // args
      id: string; // String!
      input: NexusGenInputs['UpdateBlueprintInput']; // UpdateBlueprintInput!
    };
    updateDataStore: {
      // args
      deviceId: string; // String!
      input: NexusGenInputs['UpdateDataStoreInput']; // UpdateDataStoreInput!
      transactionId: string; // String!
    };
    updateDevice: {
      // args
      id: string; // String!
      input: NexusGenInputs['UpdateDeviceInput']; // UpdateDeviceInput!
    };
    updateEventHandler: {
      // args
      event: string; // String!
      input: NexusGenInputs['UpdateEventHandlerInput']; // UpdateEventHandlerInput!
      name: string; // String!
    };
    updateGraphNodeCoordinates: {
      // args
      input: NexusGenInputs['GraphNodeCoordinatesInput'][]; // [GraphNodeCoordinatesInput!]!
    };
    updateWorkflow: {
      // args
      id: string; // String!
      input: NexusGenInputs['UpdateWorkflowInput']; // UpdateWorkflowInput!
    };
  };
  Query: {
    blueprints: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    };
    calculatedDiff: {
      // args
      deviceId: string; // String!
      transactionId: string; // String!
    };
    countries: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    };
    dataStore: {
      // args
      deviceId: string; // String!
      transactionId: string; // String!
    };
    devices: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      filter?: NexusGenInputs['FilterDevicesInput'] | null; // FilterDevicesInput
      first?: number | null; // Int
      last?: number | null; // Int
      orderBy?: NexusGenInputs['DeviceOrderByInput'] | null; // DeviceOrderByInput
    };
    eventHandler: {
      // args
      event: string; // String!
      name: string; // String!
    };
    eventHandlers: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      filter?: NexusGenInputs['FilterEventHandlerInput'] | null; // FilterEventHandlerInput
      first?: number | null; // Int
      last?: number | null; // Int
      orderBy?: NexusGenInputs['EventHandlersOrderByInput'] | null; // EventHandlersOrderByInput
    };
    eventHandlersByEvent: {
      // args
      activeOnly?: boolean | null; // Boolean
      after?: string | null; // String
      before?: string | null; // String
      event: string; // String!
      first?: number | null; // Int
      last?: number | null; // Int
    };
    executedWorkflows: {
      // args
      orderBy?: NexusGenInputs['ExecutedWorkflowsOrderByInput'] | null; // ExecutedWorkflowsOrderByInput
      pagination?: NexusGenInputs['PaginationArgs'] | null; // PaginationArgs
      searchQuery?: NexusGenInputs['ExecutedWorkflowSearchInput'] | null; // ExecutedWorkflowSearchInput
    };
    labels: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    };
    locations: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    };
    node: {
      // args
      id: string; // ID!
      version?: number | null; // Int
    };
    pollData: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      filter?: NexusGenInputs['FilterPollDataInput'] | null; // FilterPollDataInput
      first?: number | null; // Int
      last?: number | null; // Int
      orderBy: NexusGenInputs['PollsOrderByInput']; // PollsOrderByInput!
    };
    pools: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      filter?: NexusGenInputs['FilterPoolsInput'] | null; // FilterPoolsInput
      first?: number | null; // Int
      last?: number | null; // Int
      resourceTypeId?: string | null; // String
    };
    schedules: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      filter?: NexusGenInputs['ScheduleFilterInput'] | null; // ScheduleFilterInput
      first?: number | null; // Int
      last?: number | null; // Int
    };
    shortestPath: {
      // args
      from: string; // String!
      to: string; // String!
    };
    taskDefinitions: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      filter?: NexusGenInputs['FilterTaskDefinitionsInput'] | null; // FilterTaskDefinitionsInput
      first?: number | null; // Int
      last?: number | null; // Int
      orderBy?: NexusGenInputs['TasksOrderByInput'] | null; // TasksOrderByInput
    };
    topology: {
      // args
      filter?: NexusGenInputs['FilterTopologyInput'] | null; // FilterTopologyInput
    };
    topologyCommonNodes: {
      // args
      nodes: string[]; // [String!]!
    };
    topologyVersionData: {
      // args
      version: string; // String!
    };
    workflowInstanceDetail: {
      // args
      shouldIncludeTasks?: boolean | null; // Boolean
      workflowId: string; // String!
    };
    workflows: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      filter?: NexusGenInputs['FilterWorkflowsInput'] | null; // FilterWorkflowsInput
      first?: number | null; // Int
      last?: number | null; // Int
      orderBy?: NexusGenInputs['WorkflowsOrderByInput'] | null; // WorkflowsOrderByInput
    };
    zones: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    };
  };
  Subscription: {
    controlExecutedWorkflow: {
      // args
      id: string; // String!
    };
    uniconfigShell: {
      // args
      input?: string | null; // String
      sessionId: string; // String!
      trigger?: number | null; // Int
    };
  };
}

export interface NexusGenAbstractTypeMembers {
  BaseGraphNode: 'GraphNode' | 'GraphVersionNode';
  Node:
    | 'Blueprint'
    | 'Country'
    | 'Device'
    | 'EventHandler'
    | 'ExecutedWorkflow'
    | 'ExecutedWorkflowTask'
    | 'Label'
    | 'Location'
    | 'Pool'
    | 'Schedule'
    | 'TaskDefinition'
    | 'Workflow'
    | 'Zone';
}

export interface NexusGenTypeInterfaces {
  Blueprint: 'Node';
  Country: 'Node';
  Device: 'Node';
  EventHandler: 'Node';
  ExecutedWorkflow: 'Node';
  ExecutedWorkflowTask: 'Node';
  GraphNode: 'BaseGraphNode';
  GraphVersionNode: 'BaseGraphNode';
  Label: 'Node';
  Location: 'Node';
  Pool: 'Node';
  Schedule: 'Node';
  TaskDefinition: 'Node';
  Workflow: 'Node';
  Zone: 'Node';
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    __typename: true;
    isTypeOf: false;
    resolveType: false;
  };
};

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
