/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as SourceTypes from './source-types';
import type { Context } from './../context';
import type { core } from 'nexus';
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void; // "Upload";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `Upload` scalar type represents a file upload.
     */
    upload<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void; // "Upload";
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AddBlueprintInput: {
    // input type
    name: string; // String!
    template: string; // String!
  };
  AddDeviceInput: {
    // input type
    address?: string | null; // String
    blueprintId?: string | null; // String
    deviceSize?: NexusGenEnums['DeviceSize'] | null; // DeviceSize
    deviceType?: string | null; // String
    labelIds?: string[] | null; // [String!]
    model?: string | null; // String
    mountParameters?: string | null; // String
    name: string; // String!
    password?: string | null; // String
    port?: number | null; // Int
    serviceState?: NexusGenEnums['DeviceServiceState'] | null; // DeviceServiceState
    username?: string | null; // String
    vendor?: string | null; // String
    version?: string | null; // String
    zoneId: string; // String!
  };
  AddLocationInput: {
    // input type
    countryId: string; // String!
    name: string; // String!
  };
  AddSnapshotInput: {
    // input type
    deviceId: string; // String!
    name: string; // String!
  };
  AddStreamInput: {
    // input type
    blueprintId?: string | null; // String
    deviceName: string; // String!
    streamName: string; // String!
    streamParameters?: string | null; // String
  };
  AddZoneInput: {
    // input type
    name: string; // String!
  };
  ApplySnapshotInput: {
    // input type
    deviceId: string; // String!
    name: string; // String!
  };
  BulkInstallDevicesInput: {
    // input type
    deviceIds: string[]; // [String!]!
  };
  BulkInstallStreamsInput: {
    // input type
    streamIds: string[]; // [String!]!
  };
  BulkUninstallDevicesInput: {
    // input type
    deviceIds: string[]; // [String!]!
  };
  BulkUninstallStreamsInput: {
    // input type
    streamIds: string[]; // [String!]!
  };
  CSVImportInput: {
    // input type
    file: NexusGenScalars['Upload']; // Upload!
    zoneId: string; // String!
  };
  CommitConfigInput: {
    // input type
    deviceId: string; // String!
    shouldDryRun?: boolean | null; // Boolean
  };
  CreateLabelInput: {
    // input type
    name: string; // String!
  };
  DeleteSnapshotInput: {
    // input type
    deviceId: string; // String!
    name: string; // String!
    transactionId: string; // String!
  };
  DeviceOrderByInput: {
    // input type
    direction: NexusGenEnums['SortDirection']; // SortDirection!
    sortKey: NexusGenEnums['SortDeviceBy']; // SortDeviceBy!
  };
  FilterDevicesInput: {
    // input type
    deviceName?: string | null; // String
    labels?: string[] | null; // [String!]
  };
  FilterLabelsInput: {
    // input type
    name: string; // String!
  };
  FilterStreamsInput: {
    // input type
    deviceName?: string | null; // String
    labels?: string[] | null; // [String!]
    streamName?: string | null; // String
  };
  FilterTopologyInput: {
    // input type
    labels?: string[] | null; // [String!]
  };
  FilterZonesInput: {
    // input type
    name: string; // String!
  };
  GraphNodeCoordinatesInput: {
    // input type
    deviceName: string; // String!
    x: number; // Float!
    y: number; // Float!
  };
  StreamOrderByInput: {
    // input type
    direction: NexusGenEnums['SortDirection']; // SortDirection!
    sortKey: NexusGenEnums['SortStreamBy']; // SortStreamBy!
  };
  UpdateBlueprintInput: {
    // input type
    name?: string | null; // String
    template?: string | null; // String
  };
  UpdateDataStoreInput: {
    // input type
    config: string; // String!
  };
  UpdateDeviceInput: {
    // input type
    address?: string | null; // String
    blueprintId?: string | null; // String
    deviceSize?: NexusGenEnums['DeviceSize'] | null; // DeviceSize
    deviceType?: string | null; // String
    labelIds?: string[] | null; // [String!]
    locationId?: string | null; // String
    model?: string | null; // String
    mountParameters?: string | null; // String
    password?: string | null; // String
    port?: number | null; // Int
    serviceState?: NexusGenEnums['DeviceServiceState'] | null; // DeviceServiceState
    username?: string | null; // String
    vendor?: string | null; // String
    version?: string | null; // String
  };
  UpdateGraphNodeCoordinatesInput: {
    // input type
    coordinates: NexusGenInputs['GraphNodeCoordinatesInput'][]; // [GraphNodeCoordinatesInput!]!
    layer?: NexusGenEnums['TopologyLayer'] | null; // TopologyLayer
  };
  UpdateStreamInput: {
    // input type
    blueprintId?: string | null; // String
    deviceName: string; // String!
    streamName: string; // String!
    streamParameters?: string | null; // String
  };
}

export interface NexusGenEnums {
  DeviceServiceState: 'IN_SERVICE' | 'OUT_OF_SERVICE' | 'PLANNING';
  DeviceSize: 'LARGE' | 'MEDIUM' | 'SMALL';
  DeviceSource: 'DISCOVERED' | 'IMPORTED' | 'MANUAL';
  GraphEdgeStatus: 'ok' | 'unknown';
  Signalization: 'LDP' | 'RSVP';
  SortDeviceBy: 'discoveredAt' | 'modelVersion' | 'name';
  SortDirection: 'ASC' | 'DESC';
  SortStreamBy: 'createdAt' | 'deviceName' | 'streamName';
  TopologyLayer: 'EthTopology' | 'MplsTopology' | 'PhysicalTopology' | 'PtpTopology';
}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Upload: any;
}

export interface NexusGenObjects {
  ActivateStreamPayload: {
    // root type
    stream: NexusGenRootTypes['Stream']; // Stream!
  };
  AddBlueprintPayload: {
    // root type
    blueprint: NexusGenRootTypes['Blueprint']; // Blueprint!
  };
  AddDevicePayload: {
    // root type
    device: NexusGenRootTypes['Device']; // Device!
  };
  AddLocationPayload: {
    // root type
    location: NexusGenRootTypes['Location']; // Location!
  };
  AddSnapshotPayload: {
    // root type
    snapshot?: NexusGenRootTypes['Snapshot'] | null; // Snapshot
  };
  AddStreamPayload: {
    // root type
    stream: NexusGenRootTypes['Stream']; // Stream!
  };
  AddZonePayload: {
    // root type
    zone: NexusGenRootTypes['Zone']; // Zone!
  };
  ApplySnapshotPayload: {
    // root type
    isOk: boolean; // Boolean!
  };
  Blueprint: SourceTypes.Blueprint;
  BlueprintConnection: {
    // root type
    edges: NexusGenRootTypes['BlueprintEdge'][]; // [BlueprintEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  BlueprintEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Blueprint']; // Blueprint!
  };
  BulkInstallDevicePayload: {
    // root type
    installedDevices: NexusGenRootTypes['Device'][]; // [Device!]!
  };
  BulkInstallStreamPayload: {
    // root type
    installedStreams: NexusGenRootTypes['Stream'][]; // [Stream!]!
  };
  BulkUninstallDevicePayload: {
    // root type
    uninstalledDevices: NexusGenRootTypes['Device'][]; // [Device!]!
  };
  BulkUninstallStreamPayload: {
    // root type
    uninstalledStreams: NexusGenRootTypes['Stream'][]; // [Stream!]!
  };
  CSVImport: {
    // root type
    isOk?: boolean | null; // Boolean
  };
  CalculatedDiffPayload: {
    // root type
    result: NexusGenRootTypes['CalculatedDiffResult']; // CalculatedDiffResult!
  };
  CalculatedDiffResult: {
    // root type
    createdData: NexusGenRootTypes['DiffData'][]; // [DiffData!]!
    deletedData: NexusGenRootTypes['DiffData'][]; // [DiffData!]!
    updatedData: NexusGenRootTypes['CalculatedUpdateDiffData'][]; // [CalculatedUpdateDiffData!]!
  };
  CalculatedUpdateDiffData: {
    // root type
    actualData: string; // String!
    intendedData: string; // String!
    path: string; // String!
  };
  CloseTransactionPayload: {
    // root type
    isOk: boolean; // Boolean!
  };
  CommitConfigOutput: {
    // root type
    configuration?: string | null; // String
    deviceId: string; // String!
    message?: string | null; // String
  };
  CommitConfigPayload: {
    // root type
    output: NexusGenRootTypes['CommitConfigOutput']; // CommitConfigOutput!
  };
  Country: SourceTypes.Country;
  CountryConnection: {
    // root type
    edges: NexusGenRootTypes['CountryEdge'][]; // [CountryEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  CountryEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Country']; // Country!
  };
  CreateLabelPayload: {
    // root type
    label?: NexusGenRootTypes['Label'] | null; // Label
  };
  CreateTransactionPayload: {
    // root type
    transactionId?: string | null; // String
  };
  DataStore: SourceTypes.DataStore;
  DeactivateStreamPayload: {
    // root type
    stream: NexusGenRootTypes['Stream']; // Stream!
  };
  DeleteBlueprintPayload: {
    // root type
    blueprint?: NexusGenRootTypes['Blueprint'] | null; // Blueprint
  };
  DeleteDevicePayload: {
    // root type
    device?: NexusGenRootTypes['Device'] | null; // Device
  };
  DeleteLabelPayload: {
    // root type
    label?: NexusGenRootTypes['Label'] | null; // Label
  };
  DeleteSnapshotPayload: {
    // root type
    snapshot?: NexusGenRootTypes['Snapshot'] | null; // Snapshot
  };
  DeleteStreamPayload: {
    // root type
    stream?: NexusGenRootTypes['Stream'] | null; // Stream
  };
  Device: SourceTypes.Device;
  DeviceConnection: {
    // root type
    edges: NexusGenRootTypes['DeviceEdge'][]; // [DeviceEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  DeviceDiscoveryPayload: {
    // root type
    deviceId: string; // String!
    discoveredAt?: string | null; // String
  };
  DeviceEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Device']; // Device!
  };
  DeviceListUsage: {
    // root type
    devicesUsage: NexusGenRootTypes['DevicesUsage'][]; // [DevicesUsage!]!
  };
  DeviceStatus: {
    // root type
    deviceName?: string | null; // String
    status?: string | null; // String
  };
  DeviceUsage: {
    // root type
    cpuLoad?: number | null; // Float
    memoryLoad?: number | null; // Float
  };
  DevicesConnection: {
    // root type
    deviceStatuses?: Array<NexusGenRootTypes['DeviceStatus'] | null> | null; // [DeviceStatus]
  };
  DevicesUsage: {
    // root type
    cpuLoad?: number | null; // Float
    deviceName: string; // String!
    memoryLoad?: number | null; // Float
  };
  DiffData: {
    // root type
    data: string; // String!
    path: string; // String!
  };
  EdgeSourceTarget: {
    // root type
    interface: string; // String!
    nodeId: string; // String!
  };
  GraphEdge: {
    // root type
    id: string; // ID!
    source: NexusGenRootTypes['EdgeSourceTarget']; // EdgeSourceTarget!
    target: NexusGenRootTypes['EdgeSourceTarget']; // EdgeSourceTarget!
    weight?: number | null; // Int
  };
  GraphNode: {
    // root type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    device?: NexusGenRootTypes['Device'] | null; // Device
    deviceType?: string | null; // String
    id: string; // ID!
    interfaces: NexusGenRootTypes['GraphNodeInterface'][]; // [GraphNodeInterface!]!
    name: string; // String!
    softwareVersion?: string | null; // String
  };
  GraphNodeCoordinates: {
    // root type
    x: number; // Float!
    y: number; // Float!
  };
  GraphNodeInterface: {
    // root type
    id: string; // String!
    name: string; // String!
    status: NexusGenEnums['GraphEdgeStatus']; // GraphEdgeStatus!
  };
  GraphVersionEdge: {
    // root type
    id: string; // ID!
    source: NexusGenRootTypes['EdgeSourceTarget']; // EdgeSourceTarget!
    target: NexusGenRootTypes['EdgeSourceTarget']; // EdgeSourceTarget!
  };
  GraphVersionNode: {
    // root type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    deviceType?: string | null; // String
    id: string; // ID!
    interfaces: NexusGenRootTypes['GraphNodeInterface'][]; // [GraphNodeInterface!]!
    name: string; // String!
    softwareVersion?: string | null; // String
  };
  InstallDevicePayload: {
    // root type
    device: NexusGenRootTypes['Device']; // Device!
  };
  IsOkResponse: {
    // root type
    isOk: boolean; // Boolean!
  };
  Label: SourceTypes.Label;
  LabelConnection: {
    // root type
    edges: NexusGenRootTypes['LabelEdge'][]; // [LabelEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  LabelEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Label']; // Label!
  };
  Location: SourceTypes.Location;
  LocationConnection: {
    // root type
    edges: NexusGenRootTypes['LocationEdge'][]; // [LocationEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  LocationEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Location']; // Location!
  };
  LspTunnel: {
    // root type
    fromDevice?: string | null; // String
    lspId: string; // String!
    signalization?: NexusGenEnums['Signalization'] | null; // Signalization
    toDevice?: string | null; // String
    uptime?: number | null; // Int
  };
  MplsData: {
    // root type
    inputInterface?: string | null; // String
    inputLabel?: number | null; // Int
    lspId: string; // String!
    outputInterface?: string | null; // String
    outputLabel?: number | null; // Int
  };
  MplsDeviceDetails: {
    // root type
    lspTunnels?: Array<NexusGenRootTypes['LspTunnel'] | null> | null; // [LspTunnel]
    mplsData?: Array<NexusGenRootTypes['MplsData'] | null> | null; // [MplsData]
  };
  MplsGraphNode: {
    // root type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    id: string; // ID!
    interfaces: NexusGenRootTypes['MplsGraphNodeInterface'][]; // [MplsGraphNodeInterface!]!
    labels?: string[] | null; // [String!]
    mplsDeviceDetails: NexusGenRootTypes['MplsDeviceDetails']; // MplsDeviceDetails!
    name: string; // String!
    nodeId: string; // String!
    status: NexusGenEnums['GraphEdgeStatus']; // GraphEdgeStatus!
  };
  MplsGraphNodeInterface: {
    // root type
    id: string; // String!
    name: string; // String!
    status: NexusGenEnums['GraphEdgeStatus']; // GraphEdgeStatus!
  };
  MplsTopology: {
    // root type
    edges: NexusGenRootTypes['GraphEdge'][]; // [GraphEdge!]!
    nodes: NexusGenRootTypes['MplsGraphNode'][]; // [MplsGraphNode!]!
  };
  Mutation: {};
  NetInterface: {
    // root type
    id: string; // String!
    name: string; // String!
  };
  NetNetwork: {
    // root type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    id: string; // String!
    subnet: string; // String!
  };
  NetNode: {
    // root type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    id: string; // ID!
    interfaces: NexusGenRootTypes['NetInterface'][]; // [NetInterface!]!
    name: string; // String!
    networks: NexusGenRootTypes['NetNetwork'][]; // [NetNetwork!]!
    nodeId: string; // String!
  };
  NetRoutingPathNode: {
    // root type
    nodes: NexusGenRootTypes['NetRoutingPathNodeInfo'][]; // [NetRoutingPathNodeInfo!]!
    weight?: number | null; // Int
  };
  NetRoutingPathNodeInfo: {
    // root type
    name?: string | null; // String
    weight?: number | null; // Int
  };
  NetTopology: {
    // root type
    edges: NexusGenRootTypes['GraphEdge'][]; // [GraphEdge!]!
    nodes: NexusGenRootTypes['NetNode'][]; // [NetNode!]!
  };
  NetTopologyVersionData: {
    // root type
    edges: NexusGenRootTypes['GraphVersionEdge'][]; // [GraphVersionEdge!]!
    nodes: NexusGenRootTypes['NetNode'][]; // [NetNode!]!
  };
  PageInfo: {
    // root type
    endCursor?: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor?: string | null; // String
  };
  PhyTopologyVersionData: {
    // root type
    edges: NexusGenRootTypes['GraphVersionEdge'][]; // [GraphVersionEdge!]!
    nodes: NexusGenRootTypes['GraphVersionNode'][]; // [GraphVersionNode!]!
  };
  PtpDeviceDetails: {
    // root type
    clockAccuracy?: string | null; // String
    clockClass?: number | null; // Int
    clockId?: string | null; // String
    clockType?: string | null; // String
    clockVariance?: string | null; // String
    domain?: number | null; // Int
    globalPriority?: number | null; // Int
    gmClockId?: string | null; // String
    parentClockId?: string | null; // String
    ptpProfile?: string | null; // String
    timeRecoveryStatus?: string | null; // String
    userPriority?: number | null; // Int
  };
  PtpDiffSynce: {
    // root type
    edges: NexusGenRootTypes['PtpDiffSynceEdges'][]; // [PtpDiffSynceEdges!]!
  };
  PtpDiffSynceEdges: {
    // root type
    node: NexusGenRootTypes['PtpDiffSynceNode']; // PtpDiffSynceNode!
  };
  PtpDiffSynceNode: {
    // root type
    id: string; // String!
  };
  PtpGraphNode: {
    // root type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    id: string; // ID!
    interfaces: NexusGenRootTypes['PtpGraphNodeInterface'][]; // [PtpGraphNodeInterface!]!
    labels?: string[] | null; // [String!]
    name: string; // String!
    nodeId: string; // String!
    ptpDeviceDetails: NexusGenRootTypes['PtpDeviceDetails']; // PtpDeviceDetails!
    status: NexusGenEnums['GraphEdgeStatus']; // GraphEdgeStatus!
  };
  PtpGraphNodeInterface: {
    // root type
    details?: NexusGenRootTypes['PtpGraphNodeInterfaceDetails'] | null; // PtpGraphNodeInterfaceDetails
    id: string; // String!
    name: string; // String!
    status: NexusGenEnums['GraphEdgeStatus']; // GraphEdgeStatus!
  };
  PtpGraphNodeInterfaceDetails: {
    // root type
    adminOperStatus: string; // String!
    ptpStatus: string; // String!
    ptsfUnusable: string; // String!
  };
  PtpTopology: {
    // root type
    edges: NexusGenRootTypes['GraphEdge'][]; // [GraphEdge!]!
    nodes: NexusGenRootTypes['PtpGraphNode'][]; // [PtpGraphNode!]!
  };
  PtpTopologyVersionData: {
    // root type
    edges: NexusGenRootTypes['GraphVersionEdge'][]; // [GraphVersionEdge!]!
    nodes: NexusGenRootTypes['PtpGraphNode'][]; // [PtpGraphNode!]!
  };
  Query: {};
  ResetConfigPayload: {
    // root type
    dataStore: NexusGenRootTypes['DataStore']; // DataStore!
  };
  RevertChangesPayload: {
    // root type
    isOk: boolean; // Boolean!
  };
  Snapshot: {
    // root type
    createdAt: string; // String!
    name: string; // String!
  };
  Stream: SourceTypes.Stream;
  StreamConnection: {
    // root type
    edges: NexusGenRootTypes['StreamEdge'][]; // [StreamEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  StreamEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Stream']; // Stream!
  };
  Subscription: {};
  SyncFromNetworkPayload: {
    // root type
    dataStore?: NexusGenRootTypes['DataStore'] | null; // DataStore
  };
  SynceDeviceDetails: {
    // root type
    selectedForUse?: string | null; // String
  };
  SynceGraphNode: {
    // root type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    id: string; // ID!
    interfaces: NexusGenRootTypes['SynceGraphNodeInterface'][]; // [SynceGraphNodeInterface!]!
    labels?: string[] | null; // [String!]
    name: string; // String!
    nodeId: string; // String!
    status: NexusGenEnums['GraphEdgeStatus']; // GraphEdgeStatus!
    synceDeviceDetails: NexusGenRootTypes['SynceDeviceDetails']; // SynceDeviceDetails!
  };
  SynceGraphNodeInterface: {
    // root type
    details?: NexusGenRootTypes['SynceGraphNodeInterfaceDetails'] | null; // SynceGraphNodeInterfaceDetails
    id: string; // String!
    name: string; // String!
    status: NexusGenEnums['GraphEdgeStatus']; // GraphEdgeStatus!
  };
  SynceGraphNodeInterfaceDetails: {
    // root type
    notQualifiedDueTo?: string | null; // String
    notSelectedDueTo?: string | null; // String
    qualifiedForUse?: string | null; // String
    rxQualityLevel?: string | null; // String
    synceEnabled?: boolean | null; // Boolean
  };
  SynceTopology: {
    // root type
    edges: NexusGenRootTypes['GraphEdge'][]; // [GraphEdge!]!
    nodes: NexusGenRootTypes['SynceGraphNode'][]; // [SynceGraphNode!]!
  };
  SynceTopologyVersionData: {
    // root type
    edges: NexusGenRootTypes['GraphVersionEdge'][]; // [GraphVersionEdge!]!
    nodes: NexusGenRootTypes['SynceGraphNode'][]; // [SynceGraphNode!]!
  };
  Topology: {
    // root type
    edges: NexusGenRootTypes['GraphEdge'][]; // [GraphEdge!]!
    nodes: NexusGenRootTypes['GraphNode'][]; // [GraphNode!]!
  };
  TopologyCommonNodes: {
    // root type
    commonNodes: string[]; // [String!]!
  };
  Transaction: {
    // root type
    changes: NexusGenRootTypes['TransactionChange'][]; // [TransactionChange!]!
    lastCommitTime: string; // String!
    transactionId: string; // String!
  };
  TransactionChange: {
    // root type
    device: NexusGenRootTypes['Device']; // Device!
    diff: NexusGenRootTypes['TransactionDiff'][]; // [TransactionDiff!]!
  };
  TransactionDiff: {
    // root type
    dataAfter?: string | null; // String
    dataBefore?: string | null; // String
    path: string; // String!
  };
  UninstallDevicePayload: {
    // root type
    device: NexusGenRootTypes['Device']; // Device!
  };
  UpdateBlueprintPayload: {
    // root type
    blueprint: NexusGenRootTypes['Blueprint']; // Blueprint!
  };
  UpdateDataStorePayload: {
    // root type
    dataStore: NexusGenRootTypes['DataStore']; // DataStore!
  };
  UpdateDeviceMetadataPayload: {
    // root type
    devices?: Array<NexusGenRootTypes['Device'] | null> | null; // [Device]
  };
  UpdateDevicePayload: {
    // root type
    device?: NexusGenRootTypes['Device'] | null; // Device
  };
  UpdateGraphNodeCoordinatesPayload: {
    // root type
    deviceNames: string[]; // [String!]!
  };
  UpdateStreamPayload: {
    // root type
    stream?: NexusGenRootTypes['Stream'] | null; // Stream
  };
  Zone: SourceTypes.Zone;
  ZoneEdge: {
    // root type
    cursor: string; // String!
    node: NexusGenRootTypes['Zone']; // Zone!
  };
  ZonesConnection: {
    // root type
    edges: NexusGenRootTypes['ZoneEdge'][]; // [ZoneEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
}

export interface NexusGenInterfaces {
  BaseGraphNode: core.Discriminate<'GraphNode', 'required'> | core.Discriminate<'GraphVersionNode', 'required'>;
  Node:
    | core.Discriminate<'Blueprint', 'required'>
    | core.Discriminate<'Country', 'required'>
    | core.Discriminate<'Device', 'required'>
    | core.Discriminate<'Label', 'required'>
    | core.Discriminate<'Location', 'required'>
    | core.Discriminate<'Stream', 'required'>
    | core.Discriminate<'Zone', 'required'>;
}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums;

export interface NexusGenFieldTypes {
  ActivateStreamPayload: {
    // field return type
    stream: NexusGenRootTypes['Stream']; // Stream!
  };
  AddBlueprintPayload: {
    // field return type
    blueprint: NexusGenRootTypes['Blueprint']; // Blueprint!
  };
  AddDevicePayload: {
    // field return type
    device: NexusGenRootTypes['Device']; // Device!
  };
  AddLocationPayload: {
    // field return type
    location: NexusGenRootTypes['Location']; // Location!
  };
  AddSnapshotPayload: {
    // field return type
    snapshot: NexusGenRootTypes['Snapshot'] | null; // Snapshot
  };
  AddStreamPayload: {
    // field return type
    stream: NexusGenRootTypes['Stream']; // Stream!
  };
  AddZonePayload: {
    // field return type
    zone: NexusGenRootTypes['Zone']; // Zone!
  };
  ApplySnapshotPayload: {
    // field return type
    isOk: boolean; // Boolean!
  };
  Blueprint: {
    // field return type
    createdAt: string; // String!
    id: string; // ID!
    name: string; // String!
    template: string; // String!
    updatedAt: string; // String!
  };
  BlueprintConnection: {
    // field return type
    edges: NexusGenRootTypes['BlueprintEdge'][]; // [BlueprintEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  BlueprintEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Blueprint']; // Blueprint!
  };
  BulkInstallDevicePayload: {
    // field return type
    installedDevices: NexusGenRootTypes['Device'][]; // [Device!]!
  };
  BulkInstallStreamPayload: {
    // field return type
    installedStreams: NexusGenRootTypes['Stream'][]; // [Stream!]!
  };
  BulkUninstallDevicePayload: {
    // field return type
    uninstalledDevices: NexusGenRootTypes['Device'][]; // [Device!]!
  };
  BulkUninstallStreamPayload: {
    // field return type
    uninstalledStreams: NexusGenRootTypes['Stream'][]; // [Stream!]!
  };
  CSVImport: {
    // field return type
    isOk: boolean | null; // Boolean
  };
  CalculatedDiffPayload: {
    // field return type
    result: NexusGenRootTypes['CalculatedDiffResult']; // CalculatedDiffResult!
  };
  CalculatedDiffResult: {
    // field return type
    createdData: NexusGenRootTypes['DiffData'][]; // [DiffData!]!
    deletedData: NexusGenRootTypes['DiffData'][]; // [DiffData!]!
    updatedData: NexusGenRootTypes['CalculatedUpdateDiffData'][]; // [CalculatedUpdateDiffData!]!
  };
  CalculatedUpdateDiffData: {
    // field return type
    actualData: string; // String!
    intendedData: string; // String!
    path: string; // String!
  };
  CloseTransactionPayload: {
    // field return type
    isOk: boolean; // Boolean!
  };
  CommitConfigOutput: {
    // field return type
    configuration: string | null; // String
    deviceId: string; // String!
    message: string | null; // String
  };
  CommitConfigPayload: {
    // field return type
    output: NexusGenRootTypes['CommitConfigOutput']; // CommitConfigOutput!
  };
  Country: {
    // field return type
    code: string; // String!
    id: string; // ID!
    name: string; // String!
  };
  CountryConnection: {
    // field return type
    edges: NexusGenRootTypes['CountryEdge'][]; // [CountryEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  CountryEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Country']; // Country!
  };
  CreateLabelPayload: {
    // field return type
    label: NexusGenRootTypes['Label'] | null; // Label
  };
  CreateTransactionPayload: {
    // field return type
    transactionId: string | null; // String
  };
  DataStore: {
    // field return type
    config: string; // String!
    operational: string; // String!
    snapshots: NexusGenRootTypes['Snapshot'][]; // [Snapshot!]!
  };
  DeactivateStreamPayload: {
    // field return type
    stream: NexusGenRootTypes['Stream']; // Stream!
  };
  DeleteBlueprintPayload: {
    // field return type
    blueprint: NexusGenRootTypes['Blueprint'] | null; // Blueprint
  };
  DeleteDevicePayload: {
    // field return type
    device: NexusGenRootTypes['Device'] | null; // Device
  };
  DeleteLabelPayload: {
    // field return type
    label: NexusGenRootTypes['Label'] | null; // Label
  };
  DeleteSnapshotPayload: {
    // field return type
    snapshot: NexusGenRootTypes['Snapshot'] | null; // Snapshot
  };
  DeleteStreamPayload: {
    // field return type
    stream: NexusGenRootTypes['Stream'] | null; // Stream
  };
  Device: {
    // field return type
    address: string | null; // String
    blueprint: NexusGenRootTypes['Blueprint'] | null; // Blueprint
    createdAt: string; // String!
    deviceSize: NexusGenEnums['DeviceSize']; // DeviceSize!
    discoveredAt: string | null; // String
    id: string; // ID!
    isInstalled: boolean; // Boolean!
    labels: NexusGenRootTypes['LabelConnection']; // LabelConnection!
    location: NexusGenRootTypes['Location'] | null; // Location
    model: string | null; // String
    mountParameters: string | null; // String
    name: string; // String!
    port: number | null; // Int
    serviceState: NexusGenEnums['DeviceServiceState']; // DeviceServiceState!
    software: string | null; // String
    source: NexusGenEnums['DeviceSource']; // DeviceSource!
    updatedAt: string; // String!
    vendor: string | null; // String
    version: string | null; // String
    zone: NexusGenRootTypes['Zone']; // Zone!
  };
  DeviceConnection: {
    // field return type
    edges: NexusGenRootTypes['DeviceEdge'][]; // [DeviceEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  DeviceDiscoveryPayload: {
    // field return type
    deviceId: string; // String!
    discoveredAt: string | null; // String
  };
  DeviceEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Device']; // Device!
  };
  DeviceListUsage: {
    // field return type
    devicesUsage: NexusGenRootTypes['DevicesUsage'][]; // [DevicesUsage!]!
  };
  DeviceStatus: {
    // field return type
    deviceName: string | null; // String
    status: string | null; // String
  };
  DeviceUsage: {
    // field return type
    cpuLoad: number | null; // Float
    memoryLoad: number | null; // Float
  };
  DevicesConnection: {
    // field return type
    deviceStatuses: Array<NexusGenRootTypes['DeviceStatus'] | null> | null; // [DeviceStatus]
  };
  DevicesUsage: {
    // field return type
    cpuLoad: number | null; // Float
    deviceName: string; // String!
    memoryLoad: number | null; // Float
  };
  DiffData: {
    // field return type
    data: string; // String!
    path: string; // String!
  };
  EdgeSourceTarget: {
    // field return type
    interface: string; // String!
    nodeId: string; // String!
  };
  GraphEdge: {
    // field return type
    id: string; // ID!
    source: NexusGenRootTypes['EdgeSourceTarget']; // EdgeSourceTarget!
    target: NexusGenRootTypes['EdgeSourceTarget']; // EdgeSourceTarget!
    weight: number | null; // Int
  };
  GraphNode: {
    // field return type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    device: NexusGenRootTypes['Device'] | null; // Device
    deviceType: string | null; // String
    id: string; // ID!
    interfaces: NexusGenRootTypes['GraphNodeInterface'][]; // [GraphNodeInterface!]!
    name: string; // String!
    softwareVersion: string | null; // String
  };
  GraphNodeCoordinates: {
    // field return type
    x: number; // Float!
    y: number; // Float!
  };
  GraphNodeInterface: {
    // field return type
    id: string; // String!
    name: string; // String!
    status: NexusGenEnums['GraphEdgeStatus']; // GraphEdgeStatus!
  };
  GraphVersionEdge: {
    // field return type
    id: string; // ID!
    source: NexusGenRootTypes['EdgeSourceTarget']; // EdgeSourceTarget!
    target: NexusGenRootTypes['EdgeSourceTarget']; // EdgeSourceTarget!
  };
  GraphVersionNode: {
    // field return type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    deviceType: string | null; // String
    id: string; // ID!
    interfaces: NexusGenRootTypes['GraphNodeInterface'][]; // [GraphNodeInterface!]!
    name: string; // String!
    softwareVersion: string | null; // String
  };
  InstallDevicePayload: {
    // field return type
    device: NexusGenRootTypes['Device']; // Device!
  };
  IsOkResponse: {
    // field return type
    isOk: boolean; // Boolean!
  };
  Label: {
    // field return type
    createdAt: string; // String!
    id: string; // ID!
    name: string; // String!
    updatedAt: string; // String!
  };
  LabelConnection: {
    // field return type
    edges: NexusGenRootTypes['LabelEdge'][]; // [LabelEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  LabelEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Label']; // Label!
  };
  Location: {
    // field return type
    country: string; // String!
    createdAt: string; // String!
    id: string; // ID!
    name: string; // String!
    updatedAt: string; // String!
  };
  LocationConnection: {
    // field return type
    edges: NexusGenRootTypes['LocationEdge'][]; // [LocationEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  LocationEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Location']; // Location!
  };
  LspTunnel: {
    // field return type
    fromDevice: string | null; // String
    lspId: string; // String!
    signalization: NexusGenEnums['Signalization'] | null; // Signalization
    toDevice: string | null; // String
    uptime: number | null; // Int
  };
  MplsData: {
    // field return type
    inputInterface: string | null; // String
    inputLabel: number | null; // Int
    lspId: string; // String!
    outputInterface: string | null; // String
    outputLabel: number | null; // Int
  };
  MplsDeviceDetails: {
    // field return type
    lspTunnels: Array<NexusGenRootTypes['LspTunnel'] | null> | null; // [LspTunnel]
    mplsData: Array<NexusGenRootTypes['MplsData'] | null> | null; // [MplsData]
  };
  MplsGraphNode: {
    // field return type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    id: string; // ID!
    interfaces: NexusGenRootTypes['MplsGraphNodeInterface'][]; // [MplsGraphNodeInterface!]!
    labels: string[] | null; // [String!]
    mplsDeviceDetails: NexusGenRootTypes['MplsDeviceDetails']; // MplsDeviceDetails!
    name: string; // String!
    nodeId: string; // String!
    status: NexusGenEnums['GraphEdgeStatus']; // GraphEdgeStatus!
  };
  MplsGraphNodeInterface: {
    // field return type
    id: string; // String!
    name: string; // String!
    status: NexusGenEnums['GraphEdgeStatus']; // GraphEdgeStatus!
  };
  MplsTopology: {
    // field return type
    edges: NexusGenRootTypes['GraphEdge'][]; // [GraphEdge!]!
    nodes: NexusGenRootTypes['MplsGraphNode'][]; // [MplsGraphNode!]!
  };
  Mutation: {
    // field return type
    activateStream: NexusGenRootTypes['ActivateStreamPayload']; // ActivateStreamPayload!
    addBlueprint: NexusGenRootTypes['AddBlueprintPayload']; // AddBlueprintPayload!
    addDevice: NexusGenRootTypes['AddDevicePayload']; // AddDevicePayload!
    addLocation: NexusGenRootTypes['AddLocationPayload']; // AddLocationPayload!
    addSnapshot: NexusGenRootTypes['AddSnapshotPayload'] | null; // AddSnapshotPayload
    addStream: NexusGenRootTypes['AddStreamPayload']; // AddStreamPayload!
    addZone: NexusGenRootTypes['AddZonePayload']; // AddZonePayload!
    applySnapshot: NexusGenRootTypes['ApplySnapshotPayload']; // ApplySnapshotPayload!
    bulkInstallDevices: NexusGenRootTypes['BulkInstallDevicePayload']; // BulkInstallDevicePayload!
    bulkInstallStreams: NexusGenRootTypes['BulkInstallStreamPayload']; // BulkInstallStreamPayload!
    bulkUninstallDevices: NexusGenRootTypes['BulkUninstallDevicePayload']; // BulkUninstallDevicePayload!
    bulkUninstallStreams: NexusGenRootTypes['BulkUninstallStreamPayload']; // BulkUninstallStreamPayload!
    closeTransaction: NexusGenRootTypes['CloseTransactionPayload']; // CloseTransactionPayload!
    commitConfig: NexusGenRootTypes['CommitConfigPayload']; // CommitConfigPayload!
    createLabel: NexusGenRootTypes['CreateLabelPayload']; // CreateLabelPayload!
    createTransaction: NexusGenRootTypes['CreateTransactionPayload']; // CreateTransactionPayload!
    deactivateStream: NexusGenRootTypes['DeactivateStreamPayload']; // DeactivateStreamPayload!
    deleteBlueprint: NexusGenRootTypes['DeleteBlueprintPayload']; // DeleteBlueprintPayload!
    deleteDevice: NexusGenRootTypes['DeleteDevicePayload']; // DeleteDevicePayload!
    deleteLabel: NexusGenRootTypes['DeleteLabelPayload']; // DeleteLabelPayload!
    deleteSnapshot: NexusGenRootTypes['DeleteSnapshotPayload'] | null; // DeleteSnapshotPayload
    deleteStream: NexusGenRootTypes['DeleteStreamPayload']; // DeleteStreamPayload!
    importCSV: NexusGenRootTypes['CSVImport'] | null; // CSVImport
    installDevice: NexusGenRootTypes['InstallDevicePayload']; // InstallDevicePayload!
    reconnectKafka: NexusGenRootTypes['IsOkResponse'] | null; // IsOkResponse
    resetConfig: NexusGenRootTypes['ResetConfigPayload']; // ResetConfigPayload!
    revertChanges: NexusGenRootTypes['RevertChangesPayload']; // RevertChangesPayload!
    syncFromNetwork: NexusGenRootTypes['SyncFromNetworkPayload']; // SyncFromNetworkPayload!
    uninstallDevice: NexusGenRootTypes['UninstallDevicePayload']; // UninstallDevicePayload!
    updateBlueprint: NexusGenRootTypes['UpdateBlueprintPayload']; // UpdateBlueprintPayload!
    updateDataStore: NexusGenRootTypes['UpdateDataStorePayload']; // UpdateDataStorePayload!
    updateDevice: NexusGenRootTypes['UpdateDevicePayload']; // UpdateDevicePayload!
    updateDiscoveredAt: NexusGenRootTypes['DeviceDiscoveryPayload'][]; // [DeviceDiscoveryPayload!]!
    updateGraphNodeCoordinates: NexusGenRootTypes['UpdateGraphNodeCoordinatesPayload']; // UpdateGraphNodeCoordinatesPayload!
    updateStream: NexusGenRootTypes['UpdateStreamPayload']; // UpdateStreamPayload!
  };
  NetInterface: {
    // field return type
    id: string; // String!
    name: string; // String!
  };
  NetNetwork: {
    // field return type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    id: string; // String!
    subnet: string; // String!
  };
  NetNode: {
    // field return type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    id: string; // ID!
    interfaces: NexusGenRootTypes['NetInterface'][]; // [NetInterface!]!
    name: string; // String!
    networks: NexusGenRootTypes['NetNetwork'][]; // [NetNetwork!]!
    nodeId: string; // String!
  };
  NetRoutingPathNode: {
    // field return type
    nodes: NexusGenRootTypes['NetRoutingPathNodeInfo'][]; // [NetRoutingPathNodeInfo!]!
    weight: number | null; // Int
  };
  NetRoutingPathNodeInfo: {
    // field return type
    name: string | null; // String
    weight: number | null; // Int
  };
  NetTopology: {
    // field return type
    edges: NexusGenRootTypes['GraphEdge'][]; // [GraphEdge!]!
    nodes: NexusGenRootTypes['NetNode'][]; // [NetNode!]!
  };
  NetTopologyVersionData: {
    // field return type
    edges: NexusGenRootTypes['GraphVersionEdge'][]; // [GraphVersionEdge!]!
    nodes: NexusGenRootTypes['NetNode'][]; // [NetNode!]!
  };
  PageInfo: {
    // field return type
    endCursor: string | null; // String
    hasNextPage: boolean; // Boolean!
    hasPreviousPage: boolean; // Boolean!
    startCursor: string | null; // String
  };
  PhyTopologyVersionData: {
    // field return type
    edges: NexusGenRootTypes['GraphVersionEdge'][]; // [GraphVersionEdge!]!
    nodes: NexusGenRootTypes['GraphVersionNode'][]; // [GraphVersionNode!]!
  };
  PtpDeviceDetails: {
    // field return type
    clockAccuracy: string | null; // String
    clockClass: number | null; // Int
    clockId: string | null; // String
    clockType: string | null; // String
    clockVariance: string | null; // String
    domain: number | null; // Int
    globalPriority: number | null; // Int
    gmClockId: string | null; // String
    parentClockId: string | null; // String
    ptpProfile: string | null; // String
    timeRecoveryStatus: string | null; // String
    userPriority: number | null; // Int
  };
  PtpDiffSynce: {
    // field return type
    edges: NexusGenRootTypes['PtpDiffSynceEdges'][]; // [PtpDiffSynceEdges!]!
  };
  PtpDiffSynceEdges: {
    // field return type
    node: NexusGenRootTypes['PtpDiffSynceNode']; // PtpDiffSynceNode!
  };
  PtpDiffSynceNode: {
    // field return type
    id: string; // String!
  };
  PtpGraphNode: {
    // field return type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    id: string; // ID!
    interfaces: NexusGenRootTypes['PtpGraphNodeInterface'][]; // [PtpGraphNodeInterface!]!
    labels: string[] | null; // [String!]
    name: string; // String!
    nodeId: string; // String!
    ptpDeviceDetails: NexusGenRootTypes['PtpDeviceDetails']; // PtpDeviceDetails!
    status: NexusGenEnums['GraphEdgeStatus']; // GraphEdgeStatus!
  };
  PtpGraphNodeInterface: {
    // field return type
    details: NexusGenRootTypes['PtpGraphNodeInterfaceDetails'] | null; // PtpGraphNodeInterfaceDetails
    id: string; // String!
    name: string; // String!
    status: NexusGenEnums['GraphEdgeStatus']; // GraphEdgeStatus!
  };
  PtpGraphNodeInterfaceDetails: {
    // field return type
    adminOperStatus: string; // String!
    ptpStatus: string; // String!
    ptsfUnusable: string; // String!
  };
  PtpTopology: {
    // field return type
    edges: NexusGenRootTypes['GraphEdge'][]; // [GraphEdge!]!
    nodes: NexusGenRootTypes['PtpGraphNode'][]; // [PtpGraphNode!]!
  };
  PtpTopologyVersionData: {
    // field return type
    edges: NexusGenRootTypes['GraphVersionEdge'][]; // [GraphVersionEdge!]!
    nodes: NexusGenRootTypes['PtpGraphNode'][]; // [PtpGraphNode!]!
  };
  Query: {
    // field return type
    blueprints: NexusGenRootTypes['BlueprintConnection']; // BlueprintConnection!
    calculatedDiff: NexusGenRootTypes['CalculatedDiffPayload']; // CalculatedDiffPayload!
    countries: NexusGenRootTypes['CountryConnection']; // CountryConnection!
    dataStore: NexusGenRootTypes['DataStore'] | null; // DataStore
    devices: NexusGenRootTypes['DeviceConnection']; // DeviceConnection!
    kafkaHealthCheck: NexusGenRootTypes['IsOkResponse'] | null; // IsOkResponse
    labels: NexusGenRootTypes['LabelConnection']; // LabelConnection!
    locations: NexusGenRootTypes['LocationConnection']; // LocationConnection!
    mplsTopology: NexusGenRootTypes['MplsTopology'] | null; // MplsTopology
    netTopology: NexusGenRootTypes['NetTopology'] | null; // NetTopology
    netTopologyVersionData: NexusGenRootTypes['NetTopologyVersionData']; // NetTopologyVersionData!
    node: NexusGenRootTypes['Node'] | null; // Node
    phyTopologyVersionData: NexusGenRootTypes['PhyTopologyVersionData']; // PhyTopologyVersionData!
    ptpDiffSynce: NexusGenRootTypes['PtpDiffSynce']; // PtpDiffSynce!
    ptpPathToGrandMaster: string[] | null; // [String!]
    ptpTopology: NexusGenRootTypes['PtpTopology'] | null; // PtpTopology
    ptpTopologyVersionData: NexusGenRootTypes['PtpTopologyVersionData']; // PtpTopologyVersionData!
    shortestPath: NexusGenRootTypes['NetRoutingPathNode'][]; // [NetRoutingPathNode!]!
    streams: NexusGenRootTypes['StreamConnection']; // StreamConnection!
    syncePathToGrandMaster: string[] | null; // [String!]
    synceTopology: NexusGenRootTypes['SynceTopology'] | null; // SynceTopology
    synceTopologyVersionData: NexusGenRootTypes['SynceTopologyVersionData']; // SynceTopologyVersionData!
    topology: NexusGenRootTypes['Topology'] | null; // Topology
    topologyCommonNodes: NexusGenRootTypes['TopologyCommonNodes'] | null; // TopologyCommonNodes
    topologyVersions: string[] | null; // [String!]
    transactions: NexusGenRootTypes['Transaction'][]; // [Transaction!]!
    uniconfigShellSession: string | null; // String
    zones: NexusGenRootTypes['ZonesConnection']; // ZonesConnection!
  };
  ResetConfigPayload: {
    // field return type
    dataStore: NexusGenRootTypes['DataStore']; // DataStore!
  };
  RevertChangesPayload: {
    // field return type
    isOk: boolean; // Boolean!
  };
  Snapshot: {
    // field return type
    createdAt: string; // String!
    name: string; // String!
  };
  Stream: {
    // field return type
    blueprint: NexusGenRootTypes['Blueprint'] | null; // Blueprint
    createdAt: string; // String!
    deviceName: string; // String!
    id: string; // ID!
    isActive: boolean; // Boolean!
    streamName: string; // String!
    streamParameters: string | null; // String
    updatedAt: string; // String!
  };
  StreamConnection: {
    // field return type
    edges: NexusGenRootTypes['StreamEdge'][]; // [StreamEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  StreamEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Stream']; // Stream!
  };
  Subscription: {
    // field return type
    deviceUsage: NexusGenRootTypes['DeviceUsage'] | null; // DeviceUsage
    devicesConnection: NexusGenRootTypes['DevicesConnection'] | null; // DevicesConnection
    devicesUsage: NexusGenRootTypes['DeviceListUsage'] | null; // DeviceListUsage
    uniconfigShell: string | null; // String
  };
  SyncFromNetworkPayload: {
    // field return type
    dataStore: NexusGenRootTypes['DataStore'] | null; // DataStore
  };
  SynceDeviceDetails: {
    // field return type
    selectedForUse: string | null; // String
  };
  SynceGraphNode: {
    // field return type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    id: string; // ID!
    interfaces: NexusGenRootTypes['SynceGraphNodeInterface'][]; // [SynceGraphNodeInterface!]!
    labels: string[] | null; // [String!]
    name: string; // String!
    nodeId: string; // String!
    status: NexusGenEnums['GraphEdgeStatus']; // GraphEdgeStatus!
    synceDeviceDetails: NexusGenRootTypes['SynceDeviceDetails']; // SynceDeviceDetails!
  };
  SynceGraphNodeInterface: {
    // field return type
    details: NexusGenRootTypes['SynceGraphNodeInterfaceDetails'] | null; // SynceGraphNodeInterfaceDetails
    id: string; // String!
    name: string; // String!
    status: NexusGenEnums['GraphEdgeStatus']; // GraphEdgeStatus!
  };
  SynceGraphNodeInterfaceDetails: {
    // field return type
    notQualifiedDueTo: string | null; // String
    notSelectedDueTo: string | null; // String
    qualifiedForUse: string | null; // String
    rxQualityLevel: string | null; // String
    synceEnabled: boolean | null; // Boolean
  };
  SynceTopology: {
    // field return type
    edges: NexusGenRootTypes['GraphEdge'][]; // [GraphEdge!]!
    nodes: NexusGenRootTypes['SynceGraphNode'][]; // [SynceGraphNode!]!
  };
  SynceTopologyVersionData: {
    // field return type
    edges: NexusGenRootTypes['GraphVersionEdge'][]; // [GraphVersionEdge!]!
    nodes: NexusGenRootTypes['SynceGraphNode'][]; // [SynceGraphNode!]!
  };
  Topology: {
    // field return type
    edges: NexusGenRootTypes['GraphEdge'][]; // [GraphEdge!]!
    nodes: NexusGenRootTypes['GraphNode'][]; // [GraphNode!]!
  };
  TopologyCommonNodes: {
    // field return type
    commonNodes: string[]; // [String!]!
  };
  Transaction: {
    // field return type
    changes: NexusGenRootTypes['TransactionChange'][]; // [TransactionChange!]!
    lastCommitTime: string; // String!
    transactionId: string; // String!
  };
  TransactionChange: {
    // field return type
    device: NexusGenRootTypes['Device']; // Device!
    diff: NexusGenRootTypes['TransactionDiff'][]; // [TransactionDiff!]!
  };
  TransactionDiff: {
    // field return type
    dataAfter: string | null; // String
    dataBefore: string | null; // String
    path: string; // String!
  };
  UninstallDevicePayload: {
    // field return type
    device: NexusGenRootTypes['Device']; // Device!
  };
  UpdateBlueprintPayload: {
    // field return type
    blueprint: NexusGenRootTypes['Blueprint']; // Blueprint!
  };
  UpdateDataStorePayload: {
    // field return type
    dataStore: NexusGenRootTypes['DataStore']; // DataStore!
  };
  UpdateDeviceMetadataPayload: {
    // field return type
    devices: Array<NexusGenRootTypes['Device'] | null> | null; // [Device]
  };
  UpdateDevicePayload: {
    // field return type
    device: NexusGenRootTypes['Device'] | null; // Device
  };
  UpdateGraphNodeCoordinatesPayload: {
    // field return type
    deviceNames: string[]; // [String!]!
  };
  UpdateStreamPayload: {
    // field return type
    stream: NexusGenRootTypes['Stream'] | null; // Stream
  };
  Zone: {
    // field return type
    createdAt: string; // String!
    id: string; // ID!
    name: string; // String!
    updatedAt: string; // String!
  };
  ZoneEdge: {
    // field return type
    cursor: string; // String!
    node: NexusGenRootTypes['Zone']; // Zone!
  };
  ZonesConnection: {
    // field return type
    edges: NexusGenRootTypes['ZoneEdge'][]; // [ZoneEdge!]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
    totalCount: number; // Int!
  };
  BaseGraphNode: {
    // field return type
    coordinates: NexusGenRootTypes['GraphNodeCoordinates']; // GraphNodeCoordinates!
    deviceType: string | null; // String
    id: string; // ID!
    interfaces: NexusGenRootTypes['GraphNodeInterface'][]; // [GraphNodeInterface!]!
    softwareVersion: string | null; // String
  };
  Node: {
    // field return type
    id: string; // ID!
  };
}

export interface NexusGenFieldTypeNames {
  ActivateStreamPayload: {
    // field return type name
    stream: 'Stream';
  };
  AddBlueprintPayload: {
    // field return type name
    blueprint: 'Blueprint';
  };
  AddDevicePayload: {
    // field return type name
    device: 'Device';
  };
  AddLocationPayload: {
    // field return type name
    location: 'Location';
  };
  AddSnapshotPayload: {
    // field return type name
    snapshot: 'Snapshot';
  };
  AddStreamPayload: {
    // field return type name
    stream: 'Stream';
  };
  AddZonePayload: {
    // field return type name
    zone: 'Zone';
  };
  ApplySnapshotPayload: {
    // field return type name
    isOk: 'Boolean';
  };
  Blueprint: {
    // field return type name
    createdAt: 'String';
    id: 'ID';
    name: 'String';
    template: 'String';
    updatedAt: 'String';
  };
  BlueprintConnection: {
    // field return type name
    edges: 'BlueprintEdge';
    pageInfo: 'PageInfo';
    totalCount: 'Int';
  };
  BlueprintEdge: {
    // field return type name
    cursor: 'String';
    node: 'Blueprint';
  };
  BulkInstallDevicePayload: {
    // field return type name
    installedDevices: 'Device';
  };
  BulkInstallStreamPayload: {
    // field return type name
    installedStreams: 'Stream';
  };
  BulkUninstallDevicePayload: {
    // field return type name
    uninstalledDevices: 'Device';
  };
  BulkUninstallStreamPayload: {
    // field return type name
    uninstalledStreams: 'Stream';
  };
  CSVImport: {
    // field return type name
    isOk: 'Boolean';
  };
  CalculatedDiffPayload: {
    // field return type name
    result: 'CalculatedDiffResult';
  };
  CalculatedDiffResult: {
    // field return type name
    createdData: 'DiffData';
    deletedData: 'DiffData';
    updatedData: 'CalculatedUpdateDiffData';
  };
  CalculatedUpdateDiffData: {
    // field return type name
    actualData: 'String';
    intendedData: 'String';
    path: 'String';
  };
  CloseTransactionPayload: {
    // field return type name
    isOk: 'Boolean';
  };
  CommitConfigOutput: {
    // field return type name
    configuration: 'String';
    deviceId: 'String';
    message: 'String';
  };
  CommitConfigPayload: {
    // field return type name
    output: 'CommitConfigOutput';
  };
  Country: {
    // field return type name
    code: 'String';
    id: 'ID';
    name: 'String';
  };
  CountryConnection: {
    // field return type name
    edges: 'CountryEdge';
    pageInfo: 'PageInfo';
    totalCount: 'Int';
  };
  CountryEdge: {
    // field return type name
    cursor: 'String';
    node: 'Country';
  };
  CreateLabelPayload: {
    // field return type name
    label: 'Label';
  };
  CreateTransactionPayload: {
    // field return type name
    transactionId: 'String';
  };
  DataStore: {
    // field return type name
    config: 'String';
    operational: 'String';
    snapshots: 'Snapshot';
  };
  DeactivateStreamPayload: {
    // field return type name
    stream: 'Stream';
  };
  DeleteBlueprintPayload: {
    // field return type name
    blueprint: 'Blueprint';
  };
  DeleteDevicePayload: {
    // field return type name
    device: 'Device';
  };
  DeleteLabelPayload: {
    // field return type name
    label: 'Label';
  };
  DeleteSnapshotPayload: {
    // field return type name
    snapshot: 'Snapshot';
  };
  DeleteStreamPayload: {
    // field return type name
    stream: 'Stream';
  };
  Device: {
    // field return type name
    address: 'String';
    blueprint: 'Blueprint';
    createdAt: 'String';
    deviceSize: 'DeviceSize';
    discoveredAt: 'String';
    id: 'ID';
    isInstalled: 'Boolean';
    labels: 'LabelConnection';
    location: 'Location';
    model: 'String';
    mountParameters: 'String';
    name: 'String';
    port: 'Int';
    serviceState: 'DeviceServiceState';
    software: 'String';
    source: 'DeviceSource';
    updatedAt: 'String';
    vendor: 'String';
    version: 'String';
    zone: 'Zone';
  };
  DeviceConnection: {
    // field return type name
    edges: 'DeviceEdge';
    pageInfo: 'PageInfo';
    totalCount: 'Int';
  };
  DeviceDiscoveryPayload: {
    // field return type name
    deviceId: 'String';
    discoveredAt: 'String';
  };
  DeviceEdge: {
    // field return type name
    cursor: 'String';
    node: 'Device';
  };
  DeviceListUsage: {
    // field return type name
    devicesUsage: 'DevicesUsage';
  };
  DeviceStatus: {
    // field return type name
    deviceName: 'String';
    status: 'String';
  };
  DeviceUsage: {
    // field return type name
    cpuLoad: 'Float';
    memoryLoad: 'Float';
  };
  DevicesConnection: {
    // field return type name
    deviceStatuses: 'DeviceStatus';
  };
  DevicesUsage: {
    // field return type name
    cpuLoad: 'Float';
    deviceName: 'String';
    memoryLoad: 'Float';
  };
  DiffData: {
    // field return type name
    data: 'String';
    path: 'String';
  };
  EdgeSourceTarget: {
    // field return type name
    interface: 'String';
    nodeId: 'String';
  };
  GraphEdge: {
    // field return type name
    id: 'ID';
    source: 'EdgeSourceTarget';
    target: 'EdgeSourceTarget';
    weight: 'Int';
  };
  GraphNode: {
    // field return type name
    coordinates: 'GraphNodeCoordinates';
    device: 'Device';
    deviceType: 'String';
    id: 'ID';
    interfaces: 'GraphNodeInterface';
    name: 'String';
    softwareVersion: 'String';
  };
  GraphNodeCoordinates: {
    // field return type name
    x: 'Float';
    y: 'Float';
  };
  GraphNodeInterface: {
    // field return type name
    id: 'String';
    name: 'String';
    status: 'GraphEdgeStatus';
  };
  GraphVersionEdge: {
    // field return type name
    id: 'ID';
    source: 'EdgeSourceTarget';
    target: 'EdgeSourceTarget';
  };
  GraphVersionNode: {
    // field return type name
    coordinates: 'GraphNodeCoordinates';
    deviceType: 'String';
    id: 'ID';
    interfaces: 'GraphNodeInterface';
    name: 'String';
    softwareVersion: 'String';
  };
  InstallDevicePayload: {
    // field return type name
    device: 'Device';
  };
  IsOkResponse: {
    // field return type name
    isOk: 'Boolean';
  };
  Label: {
    // field return type name
    createdAt: 'String';
    id: 'ID';
    name: 'String';
    updatedAt: 'String';
  };
  LabelConnection: {
    // field return type name
    edges: 'LabelEdge';
    pageInfo: 'PageInfo';
    totalCount: 'Int';
  };
  LabelEdge: {
    // field return type name
    cursor: 'String';
    node: 'Label';
  };
  Location: {
    // field return type name
    country: 'String';
    createdAt: 'String';
    id: 'ID';
    name: 'String';
    updatedAt: 'String';
  };
  LocationConnection: {
    // field return type name
    edges: 'LocationEdge';
    pageInfo: 'PageInfo';
    totalCount: 'Int';
  };
  LocationEdge: {
    // field return type name
    cursor: 'String';
    node: 'Location';
  };
  LspTunnel: {
    // field return type name
    fromDevice: 'String';
    lspId: 'String';
    signalization: 'Signalization';
    toDevice: 'String';
    uptime: 'Int';
  };
  MplsData: {
    // field return type name
    inputInterface: 'String';
    inputLabel: 'Int';
    lspId: 'String';
    outputInterface: 'String';
    outputLabel: 'Int';
  };
  MplsDeviceDetails: {
    // field return type name
    lspTunnels: 'LspTunnel';
    mplsData: 'MplsData';
  };
  MplsGraphNode: {
    // field return type name
    coordinates: 'GraphNodeCoordinates';
    id: 'ID';
    interfaces: 'MplsGraphNodeInterface';
    labels: 'String';
    mplsDeviceDetails: 'MplsDeviceDetails';
    name: 'String';
    nodeId: 'String';
    status: 'GraphEdgeStatus';
  };
  MplsGraphNodeInterface: {
    // field return type name
    id: 'String';
    name: 'String';
    status: 'GraphEdgeStatus';
  };
  MplsTopology: {
    // field return type name
    edges: 'GraphEdge';
    nodes: 'MplsGraphNode';
  };
  Mutation: {
    // field return type name
    activateStream: 'ActivateStreamPayload';
    addBlueprint: 'AddBlueprintPayload';
    addDevice: 'AddDevicePayload';
    addLocation: 'AddLocationPayload';
    addSnapshot: 'AddSnapshotPayload';
    addStream: 'AddStreamPayload';
    addZone: 'AddZonePayload';
    applySnapshot: 'ApplySnapshotPayload';
    bulkInstallDevices: 'BulkInstallDevicePayload';
    bulkInstallStreams: 'BulkInstallStreamPayload';
    bulkUninstallDevices: 'BulkUninstallDevicePayload';
    bulkUninstallStreams: 'BulkUninstallStreamPayload';
    closeTransaction: 'CloseTransactionPayload';
    commitConfig: 'CommitConfigPayload';
    createLabel: 'CreateLabelPayload';
    createTransaction: 'CreateTransactionPayload';
    deactivateStream: 'DeactivateStreamPayload';
    deleteBlueprint: 'DeleteBlueprintPayload';
    deleteDevice: 'DeleteDevicePayload';
    deleteLabel: 'DeleteLabelPayload';
    deleteSnapshot: 'DeleteSnapshotPayload';
    deleteStream: 'DeleteStreamPayload';
    importCSV: 'CSVImport';
    installDevice: 'InstallDevicePayload';
    reconnectKafka: 'IsOkResponse';
    resetConfig: 'ResetConfigPayload';
    revertChanges: 'RevertChangesPayload';
    syncFromNetwork: 'SyncFromNetworkPayload';
    uninstallDevice: 'UninstallDevicePayload';
    updateBlueprint: 'UpdateBlueprintPayload';
    updateDataStore: 'UpdateDataStorePayload';
    updateDevice: 'UpdateDevicePayload';
    updateDiscoveredAt: 'DeviceDiscoveryPayload';
    updateGraphNodeCoordinates: 'UpdateGraphNodeCoordinatesPayload';
    updateStream: 'UpdateStreamPayload';
  };
  NetInterface: {
    // field return type name
    id: 'String';
    name: 'String';
  };
  NetNetwork: {
    // field return type name
    coordinates: 'GraphNodeCoordinates';
    id: 'String';
    subnet: 'String';
  };
  NetNode: {
    // field return type name
    coordinates: 'GraphNodeCoordinates';
    id: 'ID';
    interfaces: 'NetInterface';
    name: 'String';
    networks: 'NetNetwork';
    nodeId: 'String';
  };
  NetRoutingPathNode: {
    // field return type name
    nodes: 'NetRoutingPathNodeInfo';
    weight: 'Int';
  };
  NetRoutingPathNodeInfo: {
    // field return type name
    name: 'String';
    weight: 'Int';
  };
  NetTopology: {
    // field return type name
    edges: 'GraphEdge';
    nodes: 'NetNode';
  };
  NetTopologyVersionData: {
    // field return type name
    edges: 'GraphVersionEdge';
    nodes: 'NetNode';
  };
  PageInfo: {
    // field return type name
    endCursor: 'String';
    hasNextPage: 'Boolean';
    hasPreviousPage: 'Boolean';
    startCursor: 'String';
  };
  PhyTopologyVersionData: {
    // field return type name
    edges: 'GraphVersionEdge';
    nodes: 'GraphVersionNode';
  };
  PtpDeviceDetails: {
    // field return type name
    clockAccuracy: 'String';
    clockClass: 'Int';
    clockId: 'String';
    clockType: 'String';
    clockVariance: 'String';
    domain: 'Int';
    globalPriority: 'Int';
    gmClockId: 'String';
    parentClockId: 'String';
    ptpProfile: 'String';
    timeRecoveryStatus: 'String';
    userPriority: 'Int';
  };
  PtpDiffSynce: {
    // field return type name
    edges: 'PtpDiffSynceEdges';
  };
  PtpDiffSynceEdges: {
    // field return type name
    node: 'PtpDiffSynceNode';
  };
  PtpDiffSynceNode: {
    // field return type name
    id: 'String';
  };
  PtpGraphNode: {
    // field return type name
    coordinates: 'GraphNodeCoordinates';
    id: 'ID';
    interfaces: 'PtpGraphNodeInterface';
    labels: 'String';
    name: 'String';
    nodeId: 'String';
    ptpDeviceDetails: 'PtpDeviceDetails';
    status: 'GraphEdgeStatus';
  };
  PtpGraphNodeInterface: {
    // field return type name
    details: 'PtpGraphNodeInterfaceDetails';
    id: 'String';
    name: 'String';
    status: 'GraphEdgeStatus';
  };
  PtpGraphNodeInterfaceDetails: {
    // field return type name
    adminOperStatus: 'String';
    ptpStatus: 'String';
    ptsfUnusable: 'String';
  };
  PtpTopology: {
    // field return type name
    edges: 'GraphEdge';
    nodes: 'PtpGraphNode';
  };
  PtpTopologyVersionData: {
    // field return type name
    edges: 'GraphVersionEdge';
    nodes: 'PtpGraphNode';
  };
  Query: {
    // field return type name
    blueprints: 'BlueprintConnection';
    calculatedDiff: 'CalculatedDiffPayload';
    countries: 'CountryConnection';
    dataStore: 'DataStore';
    devices: 'DeviceConnection';
    kafkaHealthCheck: 'IsOkResponse';
    labels: 'LabelConnection';
    locations: 'LocationConnection';
    mplsTopology: 'MplsTopology';
    netTopology: 'NetTopology';
    netTopologyVersionData: 'NetTopologyVersionData';
    node: 'Node';
    phyTopologyVersionData: 'PhyTopologyVersionData';
    ptpDiffSynce: 'PtpDiffSynce';
    ptpPathToGrandMaster: 'String';
    ptpTopology: 'PtpTopology';
    ptpTopologyVersionData: 'PtpTopologyVersionData';
    shortestPath: 'NetRoutingPathNode';
    streams: 'StreamConnection';
    syncePathToGrandMaster: 'String';
    synceTopology: 'SynceTopology';
    synceTopologyVersionData: 'SynceTopologyVersionData';
    topology: 'Topology';
    topologyCommonNodes: 'TopologyCommonNodes';
    topologyVersions: 'String';
    transactions: 'Transaction';
    uniconfigShellSession: 'String';
    zones: 'ZonesConnection';
  };
  ResetConfigPayload: {
    // field return type name
    dataStore: 'DataStore';
  };
  RevertChangesPayload: {
    // field return type name
    isOk: 'Boolean';
  };
  Snapshot: {
    // field return type name
    createdAt: 'String';
    name: 'String';
  };
  Stream: {
    // field return type name
    blueprint: 'Blueprint';
    createdAt: 'String';
    deviceName: 'String';
    id: 'ID';
    isActive: 'Boolean';
    streamName: 'String';
    streamParameters: 'String';
    updatedAt: 'String';
  };
  StreamConnection: {
    // field return type name
    edges: 'StreamEdge';
    pageInfo: 'PageInfo';
    totalCount: 'Int';
  };
  StreamEdge: {
    // field return type name
    cursor: 'String';
    node: 'Stream';
  };
  Subscription: {
    // field return type name
    deviceUsage: 'DeviceUsage';
    devicesConnection: 'DevicesConnection';
    devicesUsage: 'DeviceListUsage';
    uniconfigShell: 'String';
  };
  SyncFromNetworkPayload: {
    // field return type name
    dataStore: 'DataStore';
  };
  SynceDeviceDetails: {
    // field return type name
    selectedForUse: 'String';
  };
  SynceGraphNode: {
    // field return type name
    coordinates: 'GraphNodeCoordinates';
    id: 'ID';
    interfaces: 'SynceGraphNodeInterface';
    labels: 'String';
    name: 'String';
    nodeId: 'String';
    status: 'GraphEdgeStatus';
    synceDeviceDetails: 'SynceDeviceDetails';
  };
  SynceGraphNodeInterface: {
    // field return type name
    details: 'SynceGraphNodeInterfaceDetails';
    id: 'String';
    name: 'String';
    status: 'GraphEdgeStatus';
  };
  SynceGraphNodeInterfaceDetails: {
    // field return type name
    notQualifiedDueTo: 'String';
    notSelectedDueTo: 'String';
    qualifiedForUse: 'String';
    rxQualityLevel: 'String';
    synceEnabled: 'Boolean';
  };
  SynceTopology: {
    // field return type name
    edges: 'GraphEdge';
    nodes: 'SynceGraphNode';
  };
  SynceTopologyVersionData: {
    // field return type name
    edges: 'GraphVersionEdge';
    nodes: 'SynceGraphNode';
  };
  Topology: {
    // field return type name
    edges: 'GraphEdge';
    nodes: 'GraphNode';
  };
  TopologyCommonNodes: {
    // field return type name
    commonNodes: 'String';
  };
  Transaction: {
    // field return type name
    changes: 'TransactionChange';
    lastCommitTime: 'String';
    transactionId: 'String';
  };
  TransactionChange: {
    // field return type name
    device: 'Device';
    diff: 'TransactionDiff';
  };
  TransactionDiff: {
    // field return type name
    dataAfter: 'String';
    dataBefore: 'String';
    path: 'String';
  };
  UninstallDevicePayload: {
    // field return type name
    device: 'Device';
  };
  UpdateBlueprintPayload: {
    // field return type name
    blueprint: 'Blueprint';
  };
  UpdateDataStorePayload: {
    // field return type name
    dataStore: 'DataStore';
  };
  UpdateDeviceMetadataPayload: {
    // field return type name
    devices: 'Device';
  };
  UpdateDevicePayload: {
    // field return type name
    device: 'Device';
  };
  UpdateGraphNodeCoordinatesPayload: {
    // field return type name
    deviceNames: 'String';
  };
  UpdateStreamPayload: {
    // field return type name
    stream: 'Stream';
  };
  Zone: {
    // field return type name
    createdAt: 'String';
    id: 'ID';
    name: 'String';
    updatedAt: 'String';
  };
  ZoneEdge: {
    // field return type name
    cursor: 'String';
    node: 'Zone';
  };
  ZonesConnection: {
    // field return type name
    edges: 'ZoneEdge';
    pageInfo: 'PageInfo';
    totalCount: 'Int';
  };
  BaseGraphNode: {
    // field return type name
    coordinates: 'GraphNodeCoordinates';
    deviceType: 'String';
    id: 'ID';
    interfaces: 'GraphNodeInterface';
    softwareVersion: 'String';
  };
  Node: {
    // field return type name
    id: 'ID';
  };
}

export interface NexusGenArgTypes {
  Device: {
    labels: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    };
  };
  Mutation: {
    activateStream: {
      // args
      id: string; // String!
    };
    addBlueprint: {
      // args
      input: NexusGenInputs['AddBlueprintInput']; // AddBlueprintInput!
    };
    addDevice: {
      // args
      input: NexusGenInputs['AddDeviceInput']; // AddDeviceInput!
    };
    addLocation: {
      // args
      input: NexusGenInputs['AddLocationInput']; // AddLocationInput!
    };
    addSnapshot: {
      // args
      input: NexusGenInputs['AddSnapshotInput']; // AddSnapshotInput!
      transactionId: string; // String!
    };
    addStream: {
      // args
      input: NexusGenInputs['AddStreamInput']; // AddStreamInput!
    };
    addZone: {
      // args
      input: NexusGenInputs['AddZoneInput']; // AddZoneInput!
    };
    applySnapshot: {
      // args
      input: NexusGenInputs['ApplySnapshotInput']; // ApplySnapshotInput!
      transactionId: string; // String!
    };
    bulkInstallDevices: {
      // args
      input: NexusGenInputs['BulkInstallDevicesInput']; // BulkInstallDevicesInput!
    };
    bulkInstallStreams: {
      // args
      input: NexusGenInputs['BulkInstallStreamsInput']; // BulkInstallStreamsInput!
    };
    bulkUninstallDevices: {
      // args
      input: NexusGenInputs['BulkUninstallDevicesInput']; // BulkUninstallDevicesInput!
    };
    bulkUninstallStreams: {
      // args
      input: NexusGenInputs['BulkUninstallStreamsInput']; // BulkUninstallStreamsInput!
    };
    closeTransaction: {
      // args
      deviceId: string; // String!
      transactionId: string; // String!
    };
    commitConfig: {
      // args
      input: NexusGenInputs['CommitConfigInput']; // CommitConfigInput!
      transactionId: string; // String!
    };
    createLabel: {
      // args
      input: NexusGenInputs['CreateLabelInput']; // CreateLabelInput!
    };
    createTransaction: {
      // args
      deviceId: string; // String!
    };
    deactivateStream: {
      // args
      id: string; // String!
    };
    deleteBlueprint: {
      // args
      id: string; // String!
    };
    deleteDevice: {
      // args
      id: string; // String!
    };
    deleteLabel: {
      // args
      id: string; // String!
    };
    deleteSnapshot: {
      // args
      input: NexusGenInputs['DeleteSnapshotInput']; // DeleteSnapshotInput!
    };
    deleteStream: {
      // args
      id: string; // String!
    };
    importCSV: {
      // args
      input: NexusGenInputs['CSVImportInput']; // CSVImportInput!
    };
    installDevice: {
      // args
      id: string; // String!
    };
    resetConfig: {
      // args
      deviceId: string; // String!
      transactionId: string; // String!
    };
    revertChanges: {
      // args
      transactionId: string; // String!
    };
    syncFromNetwork: {
      // args
      deviceId: string; // String!
      transactionId: string; // String!
    };
    uninstallDevice: {
      // args
      id: string; // String!
    };
    updateBlueprint: {
      // args
      id: string; // String!
      input: NexusGenInputs['UpdateBlueprintInput']; // UpdateBlueprintInput!
    };
    updateDataStore: {
      // args
      deviceId: string; // String!
      input: NexusGenInputs['UpdateDataStoreInput']; // UpdateDataStoreInput!
      transactionId: string; // String!
    };
    updateDevice: {
      // args
      id: string; // String!
      input: NexusGenInputs['UpdateDeviceInput']; // UpdateDeviceInput!
    };
    updateDiscoveredAt: {
      // args
      deviceIds: string[]; // [String!]!
    };
    updateGraphNodeCoordinates: {
      // args
      input: NexusGenInputs['UpdateGraphNodeCoordinatesInput']; // UpdateGraphNodeCoordinatesInput!
    };
    updateStream: {
      // args
      id: string; // String!
      input: NexusGenInputs['UpdateStreamInput']; // UpdateStreamInput!
    };
  };
  Query: {
    blueprints: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    };
    calculatedDiff: {
      // args
      deviceId: string; // String!
      transactionId: string; // String!
    };
    countries: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    };
    dataStore: {
      // args
      deviceId: string; // String!
      transactionId: string; // String!
    };
    devices: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      filter?: NexusGenInputs['FilterDevicesInput'] | null; // FilterDevicesInput
      first?: number | null; // Int
      last?: number | null; // Int
      orderBy?: NexusGenInputs['DeviceOrderByInput'] | null; // DeviceOrderByInput
    };
    labels: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      filter?: NexusGenInputs['FilterLabelsInput'] | null; // FilterLabelsInput
      first?: number | null; // Int
      last?: number | null; // Int
    };
    locations: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      first?: number | null; // Int
      last?: number | null; // Int
    };
    netTopologyVersionData: {
      // args
      version: string; // String!
    };
    node: {
      // args
      id: string; // ID!
    };
    phyTopologyVersionData: {
      // args
      version: string; // String!
    };
    ptpPathToGrandMaster: {
      // args
      deviceFrom: string; // String!
    };
    ptpTopologyVersionData: {
      // args
      version: string; // String!
    };
    shortestPath: {
      // args
      from: string; // String!
      to: string; // String!
    };
    streams: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      filter?: NexusGenInputs['FilterStreamsInput'] | null; // FilterStreamsInput
      first?: number | null; // Int
      last?: number | null; // Int
      orderBy?: NexusGenInputs['StreamOrderByInput'] | null; // StreamOrderByInput
    };
    syncePathToGrandMaster: {
      // args
      deviceFrom: string; // String!
    };
    synceTopologyVersionData: {
      // args
      version: string; // String!
    };
    topology: {
      // args
      filter?: NexusGenInputs['FilterTopologyInput'] | null; // FilterTopologyInput
    };
    topologyCommonNodes: {
      // args
      nodes: string[]; // [String!]!
    };
    zones: {
      // args
      after?: string | null; // String
      before?: string | null; // String
      filter?: NexusGenInputs['FilterZonesInput'] | null; // FilterZonesInput
      first?: number | null; // Int
      last?: number | null; // Int
    };
  };
  Subscription: {
    deviceUsage: {
      // args
      deviceName: string; // String!
      refreshEverySec?: number | null; // Int
    };
    devicesConnection: {
      // args
      connectionTimeout?: number | null; // Int
      targetDevices: string[]; // [String!]!
    };
    devicesUsage: {
      // args
      deviceNames: string[]; // [String!]!
      refreshEverySec?: number | null; // Int
    };
    uniconfigShell: {
      // args
      input?: string | null; // String
      sessionId: string; // String!
      trigger?: number | null; // Int
    };
  };
}

export interface NexusGenAbstractTypeMembers {
  BaseGraphNode: 'GraphNode' | 'GraphVersionNode';
  Node: 'Blueprint' | 'Country' | 'Device' | 'Label' | 'Location' | 'Stream' | 'Zone';
}

export interface NexusGenTypeInterfaces {
  Blueprint: 'Node';
  Country: 'Node';
  Device: 'Node';
  GraphNode: 'BaseGraphNode';
  GraphVersionNode: 'BaseGraphNode';
  Label: 'Node';
  Location: 'Node';
  Stream: 'Node';
  Zone: 'Node';
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    __typename: true;
    isTypeOf: false;
    resolveType: false;
  };
};

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
