### This file was generated by Nexus Schema
### Do not make changes to this file directly

input AddDeviceInput {
  address: String
  model: String
  mountParameters: String
  name: String!
  vendor: String
  zoneId: String!
}

type AddDevicePayload {
  device: Device!
}

input AddSnapshotInput {
  deviceId: String!
  name: String!
}

type AddSnapshotPayload {
  snapshot: Snapshot
}

input AddZoneInput {
  name: String!
}

type AddZonePayload {
  zone: Zone!
}

input ApplySnapshotInput {
  deviceId: String!
  name: String!
}

type ApplySnapshotPayload {
  isOk: Boolean!
  output: String!
}

type CalculatedDiffPayload {
  output: String
}

input CommitConfigInput {
  deviceId: String!
  shouldDryRun: Boolean
}

type CommitConfigPayload {
  isOk: Boolean!
  output: String!
}

type DataStore {
  config: String
  operational: String
  snapshots: [Snapshot!]!
}

type DeleteDevicePayload {
  device: Device
}

type Device implements Node {
  address: String
  id: ID!
  model: String
  name: String!
  status: DeviceStatus
  vendor: String
  zone: Zone
}

type DeviceEdge {
  cursor: String!
  node: Device!
}

enum DeviceStatus {
  INSTALLED
  NOT_INSTALLED
}

type DevicesConnection {
  edges: [DeviceEdge!]!
  pageInfo: PageInfo!
}

type InstallDevicePayload {
  device: Device!
}

type Mutation {
  addDevice(input: AddDeviceInput!): AddDevicePayload!
  addSnapshot(input: AddSnapshotInput!): AddSnapshotPayload
  addZone(input: AddZoneInput!): AddZonePayload!
  applySnapshot(input: ApplySnapshotInput!): ApplySnapshotPayload!
  commitConfig(input: CommitConfigInput!): CommitConfigPayload!
  deleteDevice(id: String!): DeleteDevicePayload!
  installDevice(id: String!): InstallDevicePayload!
  resetConfig(deviceId: String!): ResetConfigPayload!
  syncFromNetwork(deviceId: String!): SyncFromNetworkPayload!
  uninstallDevice(id: String!): UninstallDevicePayload!
  updateDataStore(deviceId: String!, input: UpdateDataStoreInput!): UpdateDataStorePayload!
  updateDevice(id: String!, input: UpdateDeviceInput!): UpdateDevicePayload!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  calculatedDiff(deviceId: String!): CalculatedDiffPayload!
  dataStore(deviceId: String!): DataStore
  devices(after: String, before: String, first: Int, last: Int): DevicesConnection!
  node(id: ID!): Node
  zones(after: String, before: String, first: Int, last: Int): ZonesConnection!
}

type ResetConfigPayload {
  dataStore: DataStore!
}

type Snapshot {
  createdAt: String!
  name: String!
}

type SyncFromNetworkPayload {
  dataStore: DataStore
}

type UninstallDevicePayload {
  device: Device!
}

input UpdateDataStoreInput {
  config: String!
}

type UpdateDataStorePayload {
  dataStore: DataStore!
}

input UpdateDeviceInput {
  address: String
  model: String
  mountParameters: String
  vendor: String
}

type UpdateDevicePayload {
  device: Device
}

type Zone implements Node {
  id: ID!
  name: String!
}

type ZoneEdge {
  cursor: String!
  node: Zone!
}

type ZonesConnection {
  edges: [ZoneEdge!]!
  pageInfo: PageInfo!
}
