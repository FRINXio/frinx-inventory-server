### This file was generated by Nexus Schema
### Do not make changes to this file directly

input AddDeviceInput {
  address: String
  model: String
  mountParameters: String
  name: String!
  vendor: String
  zoneId: String!
}

type AddDevicePayload {
  device: Device!
}

input AddZoneInput {
  name: String!
}

type AddZonePayload {
  zone: Zone!
}

type DeleteDevicePayload {
  device: Device
}

type Device implements Node {
  address: String
  id: ID!
  model: String
  name: String!
  status: DeviceStatus
  vendor: String
  zone: Zone
}

type DeviceEdge {
  cursor: String!
  node: Device!
}

enum DeviceStatus {
  INSTALLED
  NOT_INSTALLED
}

type DevicesConnection {
  edges: [DeviceEdge!]!
  pageInfo: PageInfo!
}

type InstallDevicePayload {
  device: Device!
}

type Mutation {
  addDevice(input: AddDeviceInput!): AddDevicePayload!
  addZone(input: AddZoneInput!): AddZonePayload!
  deleteDevice(id: String!): DeleteDevicePayload!
  installDevice(id: String!): InstallDevicePayload!
  uninstallDevice(id: String!): UninstallDevicePayload!
  updateDevice(id: String!, input: UpdateDeviceInput!): UpdateDevicePayload!
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  devices(after: String, before: String, first: Int, last: Int): DevicesConnection!
  node(id: ID!): Node
  zones(after: String, before: String, first: Int, last: Int): ZonesConnection!
}

type UninstallDevicePayload {
  device: Device!
}

input UpdateDeviceInput {
  address: String
  model: String
  mountParameters: String
  vendor: String
}

type UpdateDevicePayload {
  device: Device
}

type Zone implements Node {
  id: ID!
  name: String!
}

type ZoneEdge {
  cursor: String!
  node: Zone!
}

type ZonesConnection {
  edges: [ZoneEdge!]!
  pageInfo: PageInfo!
}
